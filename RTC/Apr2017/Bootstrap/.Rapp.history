rm(list=ls())#
gc()#
#
# library(ExPosition)#
# library(ez)#
# library(psych)#
#
	## load data for this example#
load('../Data/LCBO.TW.CAD.rda')#
#
	## split the data into two separate variables for later use#
PRICE.DATA <- LCBO.TW.CAD[,c("LCBO_CAD_serving","TW_CAD_serving")]#
	colnames(PRICE.DATA) <- c("LCBO_CAD","TW_CAD")#
cost.ratio <- LCBO.TW.CAD[,"LCBO.v.TW_CostRatio"]#
#
	## parametric approach.#
cor.test.res <- cor.test(PRICE.DATA[,1],PRICE.DATA[,2])#
#
### Rule 0: Visualize your data, espeically before you do anything.#
dev.new()#
plot(PRICE.DATA,pch=20,asp=1,main="American Beer in CAD (355ml serving)\n",xlab="CAD: LCBO",ylab="CAD: TW",col="mediumorchid4",cex=2)#
text(PRICE.DATA,labels=rownames(PRICE.DATA),pos=3,cex=.65,col="mediumorchid4")#
#
dev.new()#
plot(PRICE.DATA,pch=20,asp=1,main=paste0("American Beer in CAD (355ml serving)\n r = ", round(cor.test.res$estimate,digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col="mediumorchid4",cex=2)#
text(PRICE.DATA,labels=rownames(PRICE.DATA),pos=3,cex=.65,col="mediumorchid4")#
#
dev.new()#
plot(PRICE.DATA,pch=20,asp=1,main=paste0("American Beer in CAD (355ml serving)\n r = ", round(cor.test.res$estimate,digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col=ifelse(cost.ratio>1,"mediumorchid4","olivedrab4"),cex=2)#
text(PRICE.DATA,labels=rownames(PRICE.DATA),pos=3,cex=.65,col=ifelse(cost.ratio>1,"mediumorchid4","olivedrab4"))
##############
##########
######
#				What does a bootstrap look like?#
######
##########
##############
#
set.seed(13)		## set a seed for the random number generator so we can recreate the result exactly#
#
boot.indices.1 <- sample(nrow(PRICE.DATA),nrow(PRICE.DATA),replace=T)#
boot.1 <- PRICE.DATA[boot.indices.1,]	#
#
dev.new()#
plot(boot.1,pch=20,asp=1,main=paste0("BOOTSTRAPPED American Beer in CAD (355ml serving)\n r = ", round(cor(boot.1)[2,1],digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col="mediumorchid4",cex=2)#
text(boot.1,labels=rownames(boot.1),pos=3,cex=.65,col="mediumorchid4")
boot.indices.2 <- sample(nrow(PRICE.DATA),nrow(PRICE.DATA),replace=T)#
boot.2 <- PRICE.DATA[boot.indices.2,]	#
dev.new()#
plot(boot.2,pch=20,asp=1,main=paste0("PERMUTED American Beer in CAD (355ml serving)\n r = ", round(cor(boot.2)[2,1],digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col="mediumorchid4",cex=2)#
text(boot.2,labels=rownames(boot.2),pos=3,cex=.65,col="mediumorchid4")
##############
##########
######
#				Turn bootstrap into a test#
######
##########
##############
#
iters <- 1000#
boot.rs <- vector("numeric",iters)#
for(i in 1:iters){#
	boot.indices <- sample(nrow(PRICE.DATA),nrow(PRICE.DATA),replace=T)#
	boot.rs[i] <- cor(PRICE.DATA[boot.indices,])[2,1]#
}#
#
dev.new()#
hist(boot.rs,breaks=25,xlim=c(-1,1),border="white",col="mediumorchid4",main="Bootstrap Distribution",xlab="Bootstrapped correlations")
cut.offs <- sort(boot.rs)[round(c(length(boot.rs)*.025,length(boot.rs)*.975))]#
dev.new()#
hist(boot.rs,breaks=25,xlim=c(-1,1),border="white",col="mediumorchid4",main="Bootstrap: CIs",xlab="Bootstrapped correlations")#
abline(v= cut.offs[1],col="firebrick3",lty=2,lwd=1.75)#
abline(v= cut.offs[2],col="firebrick3",lty=2,lwd=1.75)#
abline(v= cor.test.res$estimate,col="olivedrab3",lty=1,lwd=1.75)
# Let's zoom in a bit.#
cut.offs <- sort(boot.rs)[round(c(length(boot.rs)*.025,length(boot.rs)*.975))]#
dev.new()#
hist(boot.rs,breaks=25,xlim=c(.5,1),border="white",col="mediumorchid4",main="Bootstrap: CIs",xlab="Bootstrapped correlations")#
abline(v= cut.offs[1],col="firebrick3",lty=2,lwd=1.75)#
abline(v= cut.offs[2],col="firebrick3",lty=2,lwd=1.75)#
abline(v= cor.test.res$estimate,col="olivedrab3",lty=1,lwd=1.75)
# Let's zoom in a bit.#
cut.offs <- sort(boot.rs)[round(c(length(boot.rs)*.025,length(boot.rs)*.975))]#
dev.new()#
hist(boot.rs,breaks=50,xlim=c(.5,1),border="white",col="mediumorchid4",main="Bootstrap: CIs",xlab="Bootstrapped correlations")#
abline(v= cut.offs[1],col="firebrick3",lty=2,lwd=1.75)#
abline(v= cut.offs[2],col="firebrick3",lty=2,lwd=1.75)#
abline(v= cor.test.res$estimate,col="olivedrab3",lty=1,lwd=1.75)
# Let's zoom in a bit.#
cut.offs <- sort(boot.rs)[round(c(length(boot.rs)*.025,length(boot.rs)*.975))]#
dev.new()#
hist(boot.rs,breaks=50,xlim=c(.5,1),border="white",col="mediumorchid4",main="Bootstrap: CIs",xlab="Bootstrapped correlations")#
abline(v= cut.offs[1],col="firebrick3",lty=2,lwd=1.75)#
abline(v= cut.offs[2],col="firebrick3",lty=2,lwd=1.75)#
abline(v= cor.test.res$estimate,col="olivedrab3",lty=1,lwd=3)
rm(list=ls())#
gc()#
#
# library(ExPosition)#
# library(ez)#
# library(psych)#
#
	## load data for this example#
load('../Data/LCBO.TW.CAD.rda')#
#
	## split the data into two separate variables for later use#
PRICE.DATA <- LCBO.TW.CAD[,c("LCBO_CAD_serving","TW_CAD_serving")]#
	colnames(PRICE.DATA) <- c("LCBO_CAD","TW_CAD")#
cost.ratio <- LCBO.TW.CAD[,"LCBO.v.TW_CostRatio"]#
#
	## parametric approach.#
cor.test.res <- cor.test(PRICE.DATA[,1],PRICE.DATA[,2])#
#
### Rule 0: Visualize your data, espeically before you do anything.#
dev.new()#
plot(PRICE.DATA,pch=20,asp=1,main="American Beer in CAD (355ml serving)\n",xlab="CAD: LCBO",ylab="CAD: TW",col="mediumorchid4",cex=2)#
text(PRICE.DATA,labels=rownames(PRICE.DATA),pos=3,cex=.65,col="mediumorchid4")#
#
dev.new()#
plot(PRICE.DATA,pch=20,asp=1,main=paste0("American Beer in CAD (355ml serving)\n r = ", round(cor.test.res$estimate,digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col="mediumorchid4",cex=2)#
text(PRICE.DATA,labels=rownames(PRICE.DATA),pos=3,cex=.65,col="mediumorchid4")#
#
dev.new()#
plot(PRICE.DATA,pch=20,asp=1,main=paste0("American Beer in CAD (355ml serving)\n r = ", round(cor.test.res$estimate,digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col=ifelse(cost.ratio>1,"mediumorchid4","olivedrab4"),cex=2)#
text(PRICE.DATA,labels=rownames(PRICE.DATA),pos=3,cex=.65,col=ifelse(cost.ratio>1,"mediumorchid4","olivedrab4"))#
##############
##########
######
#				What does a bootstrap look like?#
######
##########
##############
#
set.seed(13)		## set a seed for the random number generator so we can recreate the result exactly#
#
boot.indices.1 <- sample(nrow(PRICE.DATA),nrow(PRICE.DATA),replace=T)#
boot.1 <- PRICE.DATA[boot.indices.1,]	#
#
dev.new()#
plot(boot.1,pch=20,asp=1,main=paste0("BOOTSTRAPPED American Beer in CAD (355ml serving)\n r = ", round(cor(boot.1)[2,1],digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col="mediumorchid4",cex=2)#
text(boot.1,labels=rownames(boot.1),pos=3,cex=.65,col="mediumorchid4")#
boot.indices.2 <- sample(nrow(PRICE.DATA),nrow(PRICE.DATA),replace=T)#
boot.2 <- PRICE.DATA[boot.indices.2,]	#
dev.new()#
plot(boot.2,pch=20,asp=1,main=paste0("PERMUTED American Beer in CAD (355ml serving)\n r = ", round(cor(boot.2)[2,1],digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col="mediumorchid4",cex=2)#
text(boot.2,labels=rownames(boot.2),pos=3,cex=.65,col="mediumorchid4")#
##############
##########
######
#				Turn bootstrap into a test#
######
##########
##############
#
iters <- 1000#
boot.rs <- vector("numeric",iters)#
for(i in 1:iters){#
	boot.indices <- sample(nrow(PRICE.DATA),nrow(PRICE.DATA),replace=T)#
	boot.rs[i] <- cor(PRICE.DATA[boot.indices,])[2,1]#
}#
#
dev.new()#
hist(boot.rs,breaks=25,xlim=c(-1,1),border="white",col="mediumorchid4",main="Bootstrap Distribution",xlab="Bootstrapped correlations")#
## First, we compute the confidence intervals (as percentiles)#
CIs <- sort(boot.rs)[round(c(length(boot.rs)*.025,length(boot.rs)*.975))]#
#
dev.new()#
hist(boot.rs,breaks=25,xlim=c(-1,1),border="white",col="mediumorchid4",main="Bootstrap: CIs",xlab="Bootstrapped correlations")#
abline(v= CIs[1],col="firebrick3",lty=2,lwd=1.75)#
abline(v= CIs[2],col="firebrick3",lty=2,lwd=1.75)#
abline(v= cor.test.res$estimate,col="olivedrab3",lty=1,lwd=1.75)#
#
# Let's zoom in a bit.#
dev.new()#
hist(boot.rs,breaks=50,xlim=c(.5,1),border="white",col="mediumorchid4",main="Bootstrap: CIs",xlab="Bootstrapped correlations")#
abline(v= CIs[1],col="firebrick3",lty=2,lwd=1.75)#
abline(v= CIs[2],col="firebrick3",lty=2,lwd=1.75)#
abline(v= cor.test.res$estimate,col="olivedrab3",lty=1,lwd=3)
boot.indices.2 <- sample(nrow(PRICE.DATA),nrow(PRICE.DATA),replace=T)#
boot.2 <- PRICE.DATA[boot.indices.2,]	#
dev.new()#
plot(boot.2,pch=20,asp=1,main=paste0("PERMUTED American Beer in CAD (355ml serving)\n r = ", round(cor(boot.2)[2,1],digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col="mediumorchid4",cex=2)#
text(boot.2,labels=rownames(boot.2),pos=3,cex=.65,col="mediumorchid4")
rm(list=ls())#
gc()#
#
# library(ExPosition)#
library(ez)#
# library(psych)#
#
	## load data for this example#
load('../Data/REGION.STYLE.RATING.rda')#
#
	## parametric approach, with the ez package#
ratings_anova = ezANOVA(#
    data = REGION.STYLE.RATING#
    , dv = RATEBEER_StyleRating#
    , BEER.NAME#
    , between = c(REGION,PALE.v.NOT)#
    , type = 3#
)#
#
### Rule 0: Visualize your data, espeically before you do anything.#
dev.new()#
interaction.plot(REGION.STYLE.RATING$REGION, REGION.STYLE.RATING$PALE.v.NOT, REGION.STYLE.RATING$RATEBEER_StyleRating,type="b",xlab="REGION",ylab="STYLE RATINGS",trace.label="",pch=c(20,22),cex=2,lwd=2,col=c("mediumorchid4","darkseagreen"),main="2x2 ANOVA")#
## We will need a design-like matrix for bootstrap resampling.#
RSR.design <- makeNominalData(as.matrix(apply(REGION.STYLE.RATING[,2:3],1,paste,collapse="_")))#
#
##############
##########
######
#				What does a permutation look like?#
######
##########
##############
#
set.seed(13)		## set a seed for the random number generator so we can recreate the result exactly#
#
	## need a better name.#
boot.aov.1 <- REGION.STYLE.RATING[sort(boot.samples(REGION.STYLE.RATING,RSR.design,constrained=T)),]#
boot.aov.1$BEER <- as.factor(rownames(boot.aov.1))#
#
boot_anova_1 = ezANOVA(#
    data = droplevels(boot.aov.1)#
    , dv = RATEBEER.RATING..Style.#
    , wid = BEER#
    , between = c(REGION,PALE.v.NOT)#
    , type = 3#
)#
#
dev.new()#
interaction.plot(boot.aov.1$REGION, boot.aov.1$PALE.v.NOT, boot.aov.1$RATEBEER.RATING..Style.,type="b",xlab="REGION",ylab="STYLE RATINGS",trace.label="",pch=c(20,22),cex=2,lwd=2,col=c("mediumorchid4","darkseagreen"))
rm(list=ls())#
gc()#
#
library(ExPosition)#
library(ez)#
# library(psych)#
#
	## load data for this example#
load('../Data/REGION.STYLE.RATING.rda')#
#
	## parametric approach, with the ez package#
ratings_anova = ezANOVA(#
    data = REGION.STYLE.RATING#
    , dv = RATEBEER_StyleRating#
    , BEER.NAME#
    , between = c(REGION,PALE.v.NOT)#
    , type = 3#
)#
#
### Rule 0: Visualize your data, espeically before you do anything.#
dev.new()#
interaction.plot(REGION.STYLE.RATING$REGION, REGION.STYLE.RATING$PALE.v.NOT, REGION.STYLE.RATING$RATEBEER_StyleRating,type="b",xlab="REGION",ylab="STYLE RATINGS",trace.label="",pch=c(20,22),cex=2,lwd=2,col=c("mediumorchid4","darkseagreen"),main="2x2 ANOVA")#
## We will need a design-like matrix for bootstrap resampling.#
RSR.design <- makeNominalData(as.matrix(apply(REGION.STYLE.RATING[,2:3],1,paste,collapse="_")))#
#
##############
##########
######
#				What does a permutation look like?#
######
##########
##############
#
set.seed(13)		## set a seed for the random number generator so we can recreate the result exactly
## need a better name.#
boot.aov.1 <- REGION.STYLE.RATING[sort(boot.samples(REGION.STYLE.RATING,RSR.design,constrained=T)),]#
boot.aov.1$BEER <- as.factor(rownames(boot.aov.1))
rm(list=ls())#
gc()#
#
library(InPosition)#
library(ez)#
# library(psych)#
#
	## load data for this example#
load('../Data/REGION.STYLE.RATING.rda')#
#
	## parametric approach, with the ez package#
ratings_anova = ezANOVA(#
    data = REGION.STYLE.RATING#
    , dv = RATEBEER_StyleRating#
    , BEER.NAME#
    , between = c(REGION,PALE.v.NOT)#
    , type = 3#
)#
#
### Rule 0: Visualize your data, espeically before you do anything.#
dev.new()#
interaction.plot(REGION.STYLE.RATING$REGION, REGION.STYLE.RATING$PALE.v.NOT, REGION.STYLE.RATING$RATEBEER_StyleRating,type="b",xlab="REGION",ylab="STYLE RATINGS",trace.label="",pch=c(20,22),cex=2,lwd=2,col=c("mediumorchid4","darkseagreen"),main="2x2 ANOVA")#
## We will need a design-like matrix for bootstrap resampling.#
RSR.design <- makeNominalData(as.matrix(apply(REGION.STYLE.RATING[,2:3],1,paste,collapse="_")))#
#
##############
##########
######
#				What does a permutation look like?#
######
##########
##############
#
set.seed(13)		## set a seed for the random number generator so we can recreate the result exactly#
#
	## need a better name.#
boot.aov.1 <- REGION.STYLE.RATING[sort(boot.samples(REGION.STYLE.RATING,RSR.design,constrained=T)),]#
boot.aov.1$BEER <- as.factor(rownames(boot.aov.1))
boot_anova_1 = ezANOVA(#
    data = droplevels(boot.aov.1)#
    , dv = RATEBEER.RATING..Style.#
    , wid = BEER#
    , between = c(REGION,PALE.v.NOT)#
    , type = 3#
)
rm(list=ls())#
gc()#
#
library(InPosition)#
library(ez)#
# library(psych)#
#
	## load data for this example#
load('../Data/REGION.STYLE.RATING.rda')#
#
	## parametric approach, with the ez package#
ratings_anova = ezANOVA(#
    data = REGION.STYLE.RATING#
    , dv = RATEBEER_StyleRating#
    , wid = BEER.NAME#
    , between = c(REGION,PALE.v.NOT)#
    , type = 3#
)#
#
### Rule 0: Visualize your data, espeically before you do anything.#
dev.new()#
interaction.plot(REGION.STYLE.RATING$REGION, REGION.STYLE.RATING$PALE.v.NOT, REGION.STYLE.RATING$RATEBEER_StyleRating,type="b",xlab="REGION",ylab="STYLE RATINGS",trace.label="",pch=c(20,22),cex=2,lwd=2,col=c("mediumorchid4","darkseagreen"),main="2x2 ANOVA")#
## We will need a design-like matrix for bootstrap resampling.#
RSR.design <- makeNominalData(as.matrix(apply(REGION.STYLE.RATING[,2:3],1,paste,collapse="_")))#
#
##############
##########
######
#				What does a permutation look like?#
######
##########
##############
#
set.seed(13)		## set a seed for the random number generator so we can recreate the result exactly#
#
	## need a better name.#
boot.aov.1 <- REGION.STYLE.RATING[sort(boot.samples(REGION.STYLE.RATING,RSR.design,constrained=T)),]#
boot.aov.1$BEER <- as.factor(rownames(boot.aov.1))#
#
boot_anova_1 = ezANOVA(#
    data = droplevels(boot.aov.1)#
    , dv = RATEBEER_StyleRating#
    , wid = BEER.NAME#
    , between = c(REGION,PALE.v.NOT)#
    , type = 3#
)#
#
dev.new()#
interaction.plot(boot.aov.1$REGION, boot.aov.1$PALE.v.NOT, boot.aov.1$RATEBEER_StyleRating,type="b",xlab="REGION",ylab="STYLE RATINGS",trace.label="",pch=c(20,22),cex=2,lwd=2,col=c("mediumorchid4","darkseagreen"))
rm(list=ls())#
gc()#
#
library(InPosition)#
library(ez)#
# library(psych)#
#
	## load data for this example#
load('../Data/REGION.STYLE.RATING.rda')#
#
	## parametric approach, with the ez package#
ratings_anova = ezANOVA(#
    data = REGION.STYLE.RATING#
    , dv = RATEBEER_StyleRating#
    , wid = BEER.NAME#
    , between = c(REGION,PALE.v.NOT)#
    , type = 3#
)#
#
### Rule 0: Visualize your data, espeically before you do anything.#
dev.new()#
interaction.plot(REGION.STYLE.RATING$REGION, REGION.STYLE.RATING$PALE.v.NOT, REGION.STYLE.RATING$RATEBEER_StyleRating,type="b",xlab="REGION",ylab="STYLE RATINGS",trace.label="",pch=c(20,22),cex=2,lwd=2,col=c("mediumorchid4","darkseagreen"),main="2x2 ANOVA")#
## We will need a design-like matrix for bootstrap resampling.#
RSR.design <- makeNominalData(as.matrix(apply(REGION.STYLE.RATING[,2:3],1,paste,collapse="_")))#
#
##############
##########
######
#				What does a permutation look like?#
######
##########
##############
#
set.seed(13)		## set a seed for the random number generator so we can recreate the result exactly#
#
	## need a better name.#
boot.aov.1 <- REGION.STYLE.RATING[sort(boot.samples(REGION.STYLE.RATING,RSR.design,constrained=T)),]#
boot.aov.1$BEER.NAME <- as.factor(rownames(boot.aov.1))#
#
boot_anova_1 = ezANOVA(#
    data = droplevels(boot.aov.1)#
    , dv = RATEBEER_StyleRating#
    , wid = BEER.NAME#
    , between = c(REGION,PALE.v.NOT)#
    , type = 3#
)#
#
dev.new()#
interaction.plot(boot.aov.1$REGION, boot.aov.1$PALE.v.NOT, boot.aov.1$RATEBEER_StyleRating,type="b",xlab="REGION",ylab="STYLE RATINGS",trace.label="",pch=c(20,22),cex=2,lwd=2,col=c("mediumorchid4","darkseagreen"))#
boot.aov.2 <- REGION.STYLE.RATING[sort(boot.samples(REGION.STYLE.RATING,RSR.design,constrained=T)),]#
boot.aov.2$BEER.NAME <- as.factor(rownames(boot.aov.2))#
#
boot_anova_2 = ezANOVA(#
    data = droplevels(boot.aov.2)#
    , dv = RATEBEER_StyleRating#
    , wid = BEER.NAME#
    , between = c(REGION,PALE.v.NOT)#
    , type = 3#
    , return_aov = T#
)#
#
dev.new()#
interaction.plot(boot.aov.2$REGION, boot.aov.2$PALE.v.NOT, boot.aov.2$RATEBEER_StyleRating,type="b",xlab="REGION",ylab="STYLE RATINGS",trace.label="",pch=c(20,22),cex=2,lwd=2,col=c("mediumorchid4","darkseagreen"))
iters <- 1000#
	## real iterations to do#
#iters <- max(round(1/ratings_anova$ANOVA$p))+1#
boot.fs <- matrix(NA,iters,3)#
	colnames(boot.fs) <- c("REGION","PALE.v.NOT","REGION:PALE.v.NOT")#
boot.pale.means <- boot.region.means <- matrix(NA,iters,2)	#
boot.cell.means <- array(NA,dim=c(2,2,iters))	#
for(i in 1:iters){#
	boot.aov <- REGION.STYLE.RATING[sort(boot.samples(REGION.STYLE.RATING,RSR.design,constrained=T)),]#
	boot.aov$BEER.NAME <- as.factor(rownames(boot.aov))#
	boot_anova = suppressWarnings(ezANOVA(#
	    data = droplevels(boot.aov)#
	    , dv = RATEBEER_StyleRating#
	    , wid = BEER.NAME#
	    , between = c(REGION,PALE.v.NOT)#
	    , type = 3#
    	, return_aov = T	    #
	))#
	## need to store the means, too#
	boot.means <- model.tables(boot_anova$aov,type="means")#
	boot.region.means[i,] <- boot.means$tables[[2]]#
	boot.pale.means[i,] <- boot.means$tables[[3]]	#
	boot.cell.means[,,i] <- boot.means$tables[[4]] #
	boot.fs[i,] <- boot_anova$ANOVA$F#
	if(i%%100==0){#
		print(i)#
	}#
}
rm(list=ls())#
gc()#
#
library(ExPosition)#
# library(ez)#
# library(psych)#
#
	## load data for this example#
load('../Data/DATA.rda')#
#
	## split the data into a DATA variable and a DESIGN (which tells us where the beers are from)#
DATA <- DATA[,1:3]#
DESIGN <- CAD.ABV.RATING$REGION#
	## Standard PCA#
pca.res <- epPCA(DATA,scale=T,DESIGN= DESIGN,graphs=F)#
#
### Rule 0: Visualize your data, espeically before you do anything.#
	### Scree plot#
prettyScree(pca.res$ExPosition.Data$eigs)#
	### Component scores for rows and columns#
epGraphs(pca.res,contributionPlots=F,correlationPlotter=F)#
##############
##########
######
#				What does a bootstrap look like?#
######
##########
##############
#
set.seed(13)		## set a seed for the random number generator so we can recreate the result exactly#
#
boot.indices.1 <- sample(nrow(DATA),nrow(DATA),replace=T)#
boot.pca.1 <- DATA[boot.indices.1,]#
boot.pca.res.1 <- epPCA(boot.pca.1[,1:3],scale=T,graphs=F)#
prettyScree(boot.pca.res.1$ExPosition.Data$eigs)#
epGraphs(boot.pca.res.1,contributionPlots=F,correlationPlotter=F)#
#
### how variables differ when projected#
fjj1 <- supplementaryCols(boot.pca.1[,1:3], pca.res)#
boot.indices.2 <- sample(nrow(DATA),nrow(DATA),replace=T)#
boot.pca.2 <- DATA[boot.indices.2,]#
boot.pca.res.2 <- epPCA(boot.pca.2[,1:3],scale=T,graphs=F)#
prettyScree(boot.pca.res.2$ExPosition.Data$eigs)#
epGraphs(boot.pca.res.2,contributionPlots=F,correlationPlotter=F)#
#
### how variables differ when projected#
fjj2 <- supplementaryCols(boot.pca.2[,1:3], pca.res)
rm(list=ls())#
gc()#
#
library(ExPosition)#
# library(ez)#
# library(psych)#
#
	## load data for this example#
load('../Data/DATA.rda')#
#
	## split the data into a DATA variable and a DESIGN (which tells us where the beers are from)#
DATA <- DATA[,1:3]#
DESIGN <- CAD.ABV.RATING$REGION#
	## Standard PCA#
pca.res <- epPCA(DATA,scale=T,DESIGN= DESIGN,graphs=F)#
#
### Rule 0: Visualize your data, espeically before you do anything.#
	### Scree plot#
prettyScree(pca.res$ExPosition.Data$eigs)#
	### Component scores for rows and columns#
epGraphs(pca.res,contributionPlots=F,correlationPlotter=F)
rm(list=ls())#
gc()#
#
library(ExPosition)#
# library(ez)#
# library(psych)#
#
	## load data for this example#
load('../Data/CAD.ABV.RATING.rda')#
#
	## split the data into a DATA variable and a DESIGN (which tells us where the beers are from)#
DATA <- DATA[,1:3]#
DESIGN <- CAD.ABV.RATING$REGION#
	## Standard PCA#
pca.res <- epPCA(DATA,scale=T,DESIGN= DESIGN,graphs=F)#
#
### Rule 0: Visualize your data, espeically before you do anything.#
	### Scree plot#
prettyScree(pca.res$ExPosition.Data$eigs)#
	### Component scores for rows and columns#
epGraphs(pca.res,contributionPlots=F,correlationPlotter=F)
rm(list=ls())#
gc()#
#
library(ExPosition)#
# library(ez)#
# library(psych)#
#
	## load data for this example#
load('../Data/CAD.ABV.RATING.rda')
## split the data into a DATA variable and a DESIGN (which tells us where the beers are from)#
DATA <- DATA[,1:3]#
DESIGN <- CAD.ABV.RATING$REGION
rm(list=ls())#
gc()#
#
library(ExPosition)#
# library(ez)#
# library(psych)#
#
	## load data for this example#
load('../Data/CAD.ABV.RATING.rda')#
#
	## split the data into a DATA variable and a DESIGN (which tells us where the beers are from)#
DATA <- CAD.ABV.RATING[,1:3]#
DESIGN <- CAD.ABV.RATING$REGION
## Standard PCA#
pca.res <- epPCA(DATA,scale=T,DESIGN= DESIGN,graphs=F)
### Rule 0: Visualize your data, espeically before you do anything.#
	### Scree plot#
prettyScree(pca.res$ExPosition.Data$eigs)#
	### Component scores for rows and columns#
epGraphs(pca.res,contributionPlots=F,correlationPlotter=F)
##############
##########
######
#				What does a bootstrap look like?#
######
##########
##############
#
set.seed(13)		## set a seed for the random number generator so we can recreate the result exactly#
#
boot.indices.1 <- sample(nrow(DATA),nrow(DATA),replace=T)#
boot.pca.1 <- DATA[boot.indices.1,]#
boot.pca.res.1 <- epPCA(boot.pca.1[,1:3],scale=T,graphs=F)#
prettyScree(boot.pca.res.1$ExPosition.Data$eigs)#
epGraphs(boot.pca.res.1,contributionPlots=F,correlationPlotter=F)#
#
### how variables differ when projected#
fjj1 <- supplementaryCols(boot.pca.1[,1:3], pca.res)
boot.indices.2 <- sample(nrow(DATA),nrow(DATA),replace=T)#
boot.pca.2 <- DATA[boot.indices.2,]#
boot.pca.res.2 <- epPCA(boot.pca.2[,1:3],scale=T,graphs=F)#
prettyScree(boot.pca.res.2$ExPosition.Data$eigs)#
epGraphs(boot.pca.res.2,contributionPlots=F,correlationPlotter=F)#
#
### how variables differ when projected#
fjj2 <- supplementaryCols(boot.pca.2[,1:3], pca.res)
rm(list=ls())#
gc()#
#
library(ExPosition)#
# library(ez)#
# library(psych)#
#
	## load data for this example#
load('../Data/CAD.ABV.RATING.rda')#
#
	## split the data into a DATA variable and a DESIGN (which tells us where the beers are from)#
DATA <- CAD.ABV.RATING[,1:3]#
DESIGN <- CAD.ABV.RATING$REGION#
	## Standard PCA#
pca.res <- epPCA(DATA,scale=T,DESIGN= DESIGN,graphs=F)#
#
### Rule 0: Visualize your data, espeically before you do anything.#
	### Scree plot#
prettyScree(pca.res$ExPosition.Data$eigs)#
	### Component scores for rows and columns#
epGraphs(pca.res,contributionPlots=F,correlationPlotter=F)
##############
##########
######
#				What does a bootstrap look like?#
######
##########
##############
#
set.seed(13)		## set a seed for the random number generator so we can recreate the result exactly#
#
## A bootstrap#
boot.indices.1 <- sample(nrow(DATA),nrow(DATA),replace=T)#
boot.pca.1 <- DATA[boot.indices.1,]#
boot.pca.res.1 <- epPCA(boot.pca.1,scale=T,graphs=F)#
prettyScree(boot.pca.res.1$ExPosition.Data$eigs)#
epGraphs(boot.pca.res.1,contributionPlots=F,correlationPlotter=F)#
#
### how variables differ when projected#
fjj1 <- supplementaryCols(boot.pca.1, pca.res)#
## Another bootstrap#
boot.indices.2 <- sample(nrow(DATA),nrow(DATA),replace=T)#
boot.pca.2 <- DATA[boot.indices.2,]#
boot.pca.res.2 <- epPCA(boot.pca.2,scale=T,graphs=F)#
prettyScree(boot.pca.res.2$ExPosition.Data$eigs)#
epGraphs(boot.pca.res.2,contributionPlots=F,correlationPlotter=F)#
#
### how variables differ when projected#
fjj2 <- supplementaryCols(boot.pca.2, pca.res)#
iters <- 1000#
boot.comps <- matrix(NA,iters,length(pca.res$ExPosition.Data$eigs))#
boot.vars <- array(NA,dim=c(nrow(pca.res$ExPosition.Data$fj),ncol(pca.res$ExPosition.Data$fj),iters))
iters <- 1000#
boot.comps <- matrix(NA,iters,length(pca.res$ExPosition.Data$eigs))#
boot.vars <- array(NA,dim=c(nrow(pca.res$ExPosition.Data$fj),ncol(pca.res$ExPosition.Data$fj),iters))#
#
for(i in 1:iters){#
	boot.indices <- sample(nrow(DATA),nrow(DATA),replace=T)#
	boot.pca <- DATA[boot.indices,]#
	boot.pca.res <- epPCA(boot.pca,scale=T,graphs=F)#
	boot.comps[i,1:length(boot.pca.res$ExPosition.Data$eigs)] <- boot.pca.res$ExPosition.Data$eigs#
	if(i%%100==0){#
		print(i)#
	}#
	## project and store#
	boot.vars[,,i] <- supplementaryCols(boot.pca, pca.res)$fjj#
}
## boxplot is better here.#
boxplot(boot.comps)
rm(list=ls())#
gc()#
#
library(ExPosition)#
# library(ez)#
# library(psych)#
#
	## load data for this example#
load('../Data/CAD.ABV.RATING.rda')#
#
	## split the data into a DATA variable and a DESIGN (which tells us where the beers are from)#
DATA <- CAD.ABV.RATING[,1:3]#
DESIGN <- CAD.ABV.RATING$REGION#
	## Standard PCA#
pca.res <- epPCA(DATA,scale=T,DESIGN= DESIGN,graphs=F)#
#
### Rule 0: Visualize your data, espeically before you do anything.#
	### Scree plot#
prettyScree(pca.res$ExPosition.Data$eigs)#
	### Component scores for rows and columns#
epGraphs(pca.res,contributionPlots=F,correlationPlotter=F)
##############
##########
######
#				What does a bootstrap look like?#
######
##########
##############
#
	cor.comps <- matrix(NA,100,3)#
	PRESS <- vector("numeric",100)#
	orth.dists <- matrix(NA,nrow(DATA),100)#
		rownames(orth.dists) <- rownames(DATA)#
	### this could be an accidental way of finding outliers...#
for(i in 1:100){#
	pca.sh1 <- sort(sample(1:nrow(DATA),nrow(DATA)/2))#
	pca.sh2 <- setdiff(1:nrow(DATA),pca.sh1)#
	pca.res_sh1 <- epPCA(DATA[pca.sh1,1:3],scale=T,DESIGN= DATA$REGION[pca.sh1],graphs=F)#
	pca.sh2.from.sh1 <- supplementaryRows(DATA[pca.sh2,1:3],pca.res_sh1)#
	pca.res_sh2 <- epPCA(DATA[pca.sh2,1:3],scale=T,DESIGN= DATA$REGION[pca.sh2],graphs=F)#
	pca.sh1.from.sh2 <- supplementaryRows(DATA[pca.sh1,1:3],pca.res_sh2)#
	X2 <- pca.sh2.from.sh1$fii %*% t(pca.res_sh1$ExPosition.Data$pdq$q)#
	X1 <- pca.sh1.from.sh2$fii %*% t(pca.res_sh2$ExPosition.Data$pdq$q)#
	Xpred <- rbind(X1,X2)[rownames(DATA),]#
	pred.pca <- epPCA(Xpred,F,F,graphs=F)#
	cor.comps[i,] <- diag(cor(pca.res$ExPosition.Data$fi,pred.pca$ExPosition.Data$fi))^2#
	SS.x.xpred <- (pca.res$ExPosition.Data$X - Xpred)^2#
	orth.dists[,i] <- rowSums(SS.x.xpred)#
	PRESS[i] <- sum(SS.x.xpred)#
}
PRESS
ortho.dists_fi <- ortho.dists_p <- matrix(NA,nrow(CAD.ABV.RATING),100)#
		rownames(ortho.dists_fi) <- rownames(ortho.dists_p) <- rownames(CAD.ABV.RATING)#
#
	#sh2.cors_fi <- sh1.cors_fi <- sh2.cors_p <- sh1.cors_p <- matrix(NA,100,3)#
	sh2.cors_fi <- sh1.cors_fi <- matrix(NA,100,3)	#
	sh2.fj_dist.cors <- sh1.fj_dist.cors <- sh2.p_dist.cors <- sh1.p_dist.cors <- vector("numeric",100)#
	### I need to focus this on component selection#
		## but also which observations could be problematic (i.e., hard to predict)
for(i in 1:100){#
	pca.sh1 <- sort(sample(1:nrow(CAD.ABV.RATING),nrow(CAD.ABV.RATING)/2))#
	pca.sh2 <- setdiff(1:nrow(CAD.ABV.RATING),pca.sh1)#
	pca.res_sh1 <- epPCA(CAD.ABV.RATING[pca.sh1,1:3],scale=T,DESIGN= CAD.ABV.RATING$REGION[pca.sh1],graphs=F)#
	pca.sh2.from.sh1 <- supplementaryRows(CAD.ABV.RATING[pca.sh2,1:3],pca.res_sh1)#
	sh2.pred.p <- (pca.sh2.from.sh1$fii %*% diag(1/pca.res_sh1$ExPosition.Data$pdq$Dv))		#
	pca.res_sh2 <- epPCA(CAD.ABV.RATING[pca.sh2,1:3],scale=T,DESIGN= CAD.ABV.RATING$REGION[pca.sh2],graphs=F)#
	pca.sh1.from.sh2 <- supplementaryRows(CAD.ABV.RATING[pca.sh1,1:3],pca.res_sh2)#
	sh1.pred.p <- (pca.sh1.from.sh2$fii %*% diag(1/pca.res_sh2$ExPosition.Data$pdq$Dv))#
	sh1.cors_fi[i,] <- diag(cor(pca.res_sh1$ExPosition.Data$fi,pca.sh1.from.sh2$fii)^2)#
	sh2.cors_fi[i,] <- diag(cor(pca.res_sh2$ExPosition.Data$fi,pca.sh2.from.sh1$fii)^2)#
	sh1.fj_dist.cors[i] <- cor(rowSums(pca.res_sh1$ExPosition.Data$fi^2),rowSums(pca.sh1.from.sh2$fii^2))#
	sh1.p_dist.cors[i] <- cor(rowSums(pca.res_sh1$ExPosition.Data$pdq$p^2),rowSums(sh1.pred.p^2))#
	sh2.fj_dist.cors[i] <- cor(rowSums(pca.res_sh2$ExPosition.Data$fi^2),rowSums(pca.sh2.from.sh1$fii^2))#
	sh2.p_dist.cors[i] <- cor(rowSums(pca.res_sh2$ExPosition.Data$pdq$p^2),rowSums(sh2.pred.p^2))#
	## prediction errors		#
	one.minus.pred_p <- (pca.res_sh1$ExPosition.Data$pdq$p - sh1.pred.p)^2#
	two.minus.pred_p <- (pca.res_sh2$ExPosition.Data$pdq$p - sh2.pred.p)^2#
	preds_p <- rbind(one.minus.pred_p, two.minus.pred_p)[rownames(ortho.dists_p),]#
	ortho.dists_p[,i] <- rowSums(preds_p)#
	one.minus.pred_fi <- (pca.res_sh1$ExPosition.Data$fi - pca.sh1.from.sh2$fii)^2#
	two.minus.pred_fi <- (pca.res_sh2$ExPosition.Data$fi - pca.sh2.from.sh1$fii)^2#
	preds_fi <- rbind(one.minus.pred_fi, two.minus.pred_fi)[rownames(ortho.dists_fi),]	#
	ortho.dists_fi[,i] <- rowSums(preds_fi)	#
}#
#
PRESS_p <- colSums(ortho.dists_p)#
PRESS_fi <- colSums(ortho.dists_fi)
PRESS_p
ortho.dists_fi
ortho.dists_p
rm(list=ls())#
gc()#
#
# library(ExPosition)#
# library(ez)#
# library(psych)#
#
	## load data for this example#
load('../Data/LCBO.TW.CAD.rda')#
#
	## split the data into two separate variables for later use#
PRICE.DATA <- LCBO.TW.CAD[,c("LCBO_CAD_serving","TW_CAD_serving")]#
	colnames(PRICE.DATA) <- c("LCBO_CAD","TW_CAD")#
cost.ratio <- LCBO.TW.CAD[,"LCBO.v.TW_CostRatio"]#
#
	## parametric approach.#
cor.test.res <- cor.test(PRICE.DATA[,1],PRICE.DATA[,2])
##############
##########
######
#				What does a bootstrap look like?#
######
##########
##############
#
set.seed(13)		## set a seed for the random number generator so we can recreate the result exactly#
#
boot.indices.1 <- sample(nrow(PRICE.DATA),nrow(PRICE.DATA),replace=T)#
boot.1 <- PRICE.DATA[boot.indices.1,]	#
#
dev.new()#
plot(boot.1,pch=20,asp=1,main=paste0("BOOTSTRAPPED American Beer in CAD (355ml serving)\n r = ", round(cor(boot.1)[2,1],digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col="mediumorchid4",cex=2)#
text(boot.1,labels=rownames(boot.1),pos=3,cex=.65,col="mediumorchid4")
boot.indices.2 <- sample(nrow(PRICE.DATA),nrow(PRICE.DATA),replace=T)#
boot.2 <- PRICE.DATA[boot.indices.2,]	#
dev.new()#
plot(boot.2,pch=20,asp=1,main=paste0("PERMUTED American Beer in CAD (355ml serving)\n r = ", round(cor(boot.2)[2,1],digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col="mediumorchid4",cex=2)#
text(boot.2,labels=rownames(boot.2),pos=3,cex=.65,col="mediumorchid4")
boot.indices.2 <- sample(nrow(PRICE.DATA),nrow(PRICE.DATA),replace=T)#
boot.2 <- PRICE.DATA[boot.indices.2,]	#
dev.new()#
plot(boot.2,pch=20,asp=1,main=paste0("BOOTSTRAPPED American Beer in CAD (355ml serving)\n r = ", round(cor(boot.2)[2,1],digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col="mediumorchid4",cex=2)#
text(boot.2,labels=rownames(boot.2),pos=3,cex=.65,col="mediumorchid4")
set.seed(13)		## set a seed for the random number generator so we can recreate the result exactly
boot.indices.1 <- sample(nrow(PRICE.DATA),nrow(PRICE.DATA),replace=T)#
boot.1 <- PRICE.DATA[boot.indices.1,]
boot.indices.2 <- sample(nrow(PRICE.DATA),nrow(PRICE.DATA),replace=T)#
boot.2 <- PRICE.DATA[boot.indices.2,]	#
dev.new()#
plot(boot.2,pch=20,asp=1,main=paste0("BOOTSTRAPPED American Beer in CAD (355ml serving)\n r = ", round(cor(boot.2)[2,1],digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col="mediumorchid4",cex=2)#
text(boot.2,labels=rownames(boot.2),pos=3,cex=.65,col="mediumorchid4")
set.seed(13)		## set a seed for the random number generator so we can recreate the result exactly#
#
boot.indices.1 <- sample(nrow(PRICE.DATA),nrow(PRICE.DATA),replace=T)#
boot.1 <- PRICE.DATA[boot.indices.1,]	#
#
dev.new()#
plot(boot.1,pch=20,asp=1,main=paste0("BOOTSTRAPPED American Beer in CAD (355ml serving)\n r = ", round(cor(boot.1)[2,1],digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col="mediumorchid4",cex=2)#
text(boot.1,labels=rownames(boot.1),pos=3,cex=.65,col="mediumorchid4")#
boot.indices.2 <- sample(nrow(PRICE.DATA),nrow(PRICE.DATA),replace=T)#
boot.2 <- PRICE.DATA[boot.indices.2,]	#
dev.new()#
plot(boot.2,pch=20,asp=1,main=paste0("BOOTSTRAPPED American Beer in CAD (355ml serving)\n r = ", round(cor(boot.2)[2,1],digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col="mediumorchid4",cex=2)#
text(boot.2,labels=rownames(boot.2),pos=3,cex=.65,col="mediumorchid4")
boot.indices.2 <- sample(nrow(PRICE.DATA),nrow(PRICE.DATA),replace=T)#
boot.2 <- PRICE.DATA[boot.indices.2,]	#
dev.new()#
plot(boot.2,pch=20,asp=1,main=paste0("BOOTSTRAPPED American Beer in CAD (355ml serving)\n r = ", round(cor(boot.2)[2,1],digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col="mediumorchid4",cex=2)#
text(boot.2,labels=rownames(boot.2),pos=3,cex=.65,col="mediumorchid4")
dev.new()#
hist(boot.rs,breaks=25,xlim=c(-1,1),border="white",col="mediumorchid4",main="Bootstrap Distribution",xlab="Bootstrapped correlations")
iters <- 1000#
boot.rs <- vector("numeric",iters)#
for(i in 1:iters){#
	boot.indices <- sample(nrow(PRICE.DATA),nrow(PRICE.DATA),replace=T)#
	boot.rs[i] <- cor(PRICE.DATA[boot.indices,])[2,1]#
}#
#
dev.new()#
hist(boot.rs,breaks=25,xlim=c(-1,1),border="white",col="mediumorchid4",main="Bootstrap Distribution",xlab="Bootstrapped correlations")
dev.new()#
hist(boot.rs,breaks=25,xlim=c(.5,1),border="white",col="mediumorchid4",main="Bootstrap Distribution",xlab="Bootstrapped correlations")
## First, we compute the confidence intervals (as percentiles)#
CIs <- sort(boot.rs)[round(c(length(boot.rs)*.025,length(boot.rs)*.975))]
# Let's zoom in a bit.#
dev.new()#
hist(boot.rs,breaks=50,xlim=c(.5,1),border="white",col="mediumorchid4",main="Bootstrap: CIs",xlab="Bootstrapped correlations")#
abline(v= CIs[1],col="firebrick3",lty=2,lwd=1.75)#
abline(v= CIs[2],col="firebrick3",lty=2,lwd=1.75)#
abline(v= cor.test.res$estimate,col="olivedrab3",lty=1,lwd=3)
# Let's zoom in a bit.#
dev.new()#
hist(boot.rs,breaks=25,xlim=c(.5,1),border="white",col="mediumorchid4",main="Bootstrap: CIs",xlab="Bootstrapped correlations")#
abline(v= CIs[1],col="firebrick3",lty=2,lwd=1.75)#
abline(v= CIs[2],col="firebrick3",lty=2,lwd=1.75)#
abline(v= cor.test.res$estimate,col="olivedrab3",lty=1,lwd=3)
CIs
iters <- 100000#
boot.rs <- vector("numeric",iters)#
for(i in 1:iters){#
	boot.indices <- sample(nrow(PRICE.DATA),nrow(PRICE.DATA),replace=T)#
	boot.rs[i] <- cor(PRICE.DATA[boot.indices,])[2,1]#
}
iters <- 100000#
boot.rs <- vector("numeric",iters)#
for(i in 1:iters){#
	boot.indices <- sample(nrow(PRICE.DATA),nrow(PRICE.DATA),replace=T)#
	boot.rs[i] <- cor(PRICE.DATA[boot.indices,])[2,1]#
	if( (i%%250)	==0){#
		print(i)#
	}#
}
## First, we compute the confidence intervals (as percentiles)#
CIs <- sort(boot.rs)[round(c(length(boot.rs)*.025,length(boot.rs)*.975))]
CIs
iters <- 100#
boot.rs <- vector("numeric",iters)#
for(i in 1:iters){#
	boot.indices <- sample(nrow(PRICE.DATA),nrow(PRICE.DATA),replace=T)#
	boot.rs[i] <- cor(PRICE.DATA[boot.indices,])[2,1]#
	if( (i%%250)	==0){#
		print(i)#
	}#
}
## First, we compute the confidence intervals (as percentiles)#
CIs <- sort(boot.rs)[round(c(length(boot.rs)*.025,length(boot.rs)*.975))]
CIs
iters <- 10000#
boot.rs <- vector("numeric",iters)#
for(i in 1:iters){#
	boot.indices <- sample(nrow(PRICE.DATA),nrow(PRICE.DATA),replace=T)#
	boot.rs[i] <- cor(PRICE.DATA[boot.indices,])[2,1]#
	if( (i%%250)	==0){#
		print(i)#
	}#
}
## First, we compute the confidence intervals (as percentiles)#
CIs <- sort(boot.rs)[round(c(length(boot.rs)*.025,length(boot.rs)*.975))]
CIs
cor.test.res
rm(list=ls())#
gc()#
#
library(ExPosition)#
# library(ez)#
# library(psych)#
#
	## load data for this example#
load('../Data/CAD.ABV.RATING.rda')#
#
	## split the data into a DATA variable and a DESIGN (which tells us where the beers are from)#
DATA <- CAD.ABV.RATING[,1:3]#
DESIGN <- CAD.ABV.RATING$REGION#
	## Standard PCA#
pca.res <- epPCA(DATA,scale=T,DESIGN= DESIGN,graphs=F)
iters <- 1000#
boot.comps <- matrix(NA,iters,length(pca.res$ExPosition.Data$eigs))#
boot.vars <- array(NA,dim=c(nrow(pca.res$ExPosition.Data$fj),ncol(pca.res$ExPosition.Data$fj),iters))#
#
for(i in 1:iters){#
	boot.indices <- sample(nrow(DATA),nrow(DATA),replace=T)#
	boot.pca <- DATA[boot.indices,]#
	boot.pca.res <- epPCA(boot.pca,scale=T,graphs=F)#
	boot.comps[i,1:length(boot.pca.res$ExPosition.Data$eigs)] <- boot.pca.res$ExPosition.Data$eigs#
	if(i%%100==0){#
		print(i)#
	}#
	## project and store#
	boot.vars[,,i] <- supplementaryCols(boot.pca, pca.res)$fjj#
}
boxplot(boot.comps)
boxplot(boot.comps)#
abline(h=pca.res$ExPosition.Data$eigs)
boxplot(boot.comps)#
abline(h=pca.res$ExPosition.Data$eigs,lty=2,col=c("red","green","blue"),lwd=2)
prettyScree
boxplot(boot.comps)#
points(pca.res$ExPosition.Data$eigs,col=c("red","green","blue"))
boxplot(boot.comps)#
points(pca.res$ExPosition.Data$eigs,col=c("red","green","blue"),pch=20,cex=2)
boxplot(boot.comps)#
points(pca.res$ExPosition.Data$eigs,col=c("red","green","blue"),pch=20,cex=2)#
abline(h=pca.res$ExPosition.Data$eigs,lty=2,col=c("red","green","blue"),lwd=2)
boxplot(boot.comps)#
abline(h=pca.res$ExPosition.Data$eigs,lty=2,col=c("red","green","blue"),lwd=2)#
points(pca.res$ExPosition.Data$eigs,col=c("red","green","blue"),pch=20,cex=2)#
points(pca.res$ExPosition.Data$eigs,type="l")
boxplot(boot.comps)#
abline(h=pca.res$ExPosition.Data$eigs,lty=2,col=c("red","green","blue"),lwd=2)#
points(pca.res$ExPosition.Data$eigs,col=c("red","green","blue"),pch=20,cex=2)#
points(pca.res$ExPosition.Data$eigs,type="l",lty=1,lwd=2)
boxplot(boot.comps)#
abline(h=pca.res$ExPosition.Data$eigs,lty=2,col=c("red","green","blue"),lwd=2)#
points(pca.res$ExPosition.Data$eigs,type="l",lty=1,lwd=2,col="mediumorchid4")#
points(pca.res$ExPosition.Data$eigs,col=c("red","green","blue"),pch=20,cex=2)
boxplot(boot.comps,col=c("red","green","blue"))
boxplot(boot.comps,col=c("red","green","blue"))#
abline(h=pca.res$ExPosition.Data$eigs,lty=2,col=c("red","green","blue"),lwd=2)#
points(pca.res$ExPosition.Data$eigs,type="l",lty=1,lwd=2,col="mediumorchid4")#
points(pca.res$ExPosition.Data$eigs,col=c("red","green","blue"),pch=20,cex=2)
boxplot(boot.comps,col=c("red","green","blue"))#
abline(h=pca.res$ExPosition.Data$eigs,lty=2,col=c("red","green","blue"),lwd=2)#
points(pca.res$ExPosition.Data$eigs,type="l",lty=1,lwd=2,col="mediumorchid4")#
points(pca.res$ExPosition.Data$eigs,bg=c("red","green","blue"),pch=21,cex=2)
boxplot(boot.comps,col=c("red","green","blue"))#
abline(h=pca.res$ExPosition.Data$eigs,lty=2,col=c("red","green","blue"),lwd=2)#
points(pca.res$ExPosition.Data$eigs,type="l",lty=1,lwd=2,col="grey80")#
points(pca.res$ExPosition.Data$eigs,bg=c("red","green","blue"),pch=21,cex=2)
prettyScree
boxplot(boot.comps,col=c("red","green","blue"))#
abline(h=pca.res$ExPosition.Data$eigs,lty=2,col=c("red","green","blue"),lwd=2)#
points(pca.res$ExPosition.Data$eigs,type="l",lty=1,lwd=2,col="grey80")#
points(pca.res$ExPosition.Data$eigs,bg=c("red","green","blue"),pch=21,cex=2)
boxplot(boot.comps,col=c("red","green","blue"))#
abline(h=pca.res$ExPosition.Data$eigs,lty=2,col=c("red","green","blue"),lwd=2)#
points(pca.res$ExPosition.Data$eigs,type="l",lty=1,lwd=2,col="grey80")#
points(pca.res$ExPosition.Data$eigs,bg=c("red","green","blue"),pch=21,cex=2)#
axis(4,at=pca.res$ExPosition.Data$eigs,labels=round(pca.res$ExPosition.Data$eigs,digits=2))#
mtext("Observed eigenvalues",4,line=4)
boxplot(boot.comps,col=c("red","green","blue"),main="Bootstrapped and observed eigenvalues")#
abline(h=pca.res$ExPosition.Data$eigs,lty=2,col=c("red","green","blue"),lwd=2)#
points(pca.res$ExPosition.Data$eigs,type="l",lty=1,lwd=2,col="grey80")#
points(pca.res$ExPosition.Data$eigs,bg=c("red","green","blue"),pch=21,cex=2)#
axis(4,at=pca.res$ExPosition.Data$eigs,labels=round(pca.res$ExPosition.Data$eigs,digits=2))
prettyPlot(pca.res$ExPosition.Data$fj,cex=2)
epGraphs(pca.res,contributionPlots=F,correlationPlotter=F)
epGraphs(pca.res,contributionPlots=F,correlationPlotter=F)$fj.col
prettyPlot(pca.res$ExPosition.Data$fj,cex=2,col-"mediumorchid4")
prettyPlot(pca.res$ExPosition.Data$fj,cex=2,col="mediumorchid4")
pca.res$ExPosition.Data$cj
prettyPlot(pca.res$ExPosition.Data$fj,cex=1,col="mediumorchid4",contributions=pca.res$ExPosition.Data$cj,contributionCircles=T)
boot.vars
i=1
boot.vars[i,,]
t(boot.vars[i,,])
prettyPlot(pca.res$ExPosition.Data$fj,cex=1,col="mediumorchid4",contributions=pca.res$ExPosition.Data$cj,contributionCircles=T)#
peeledHull(t(boot.vars[i,,]))
prettyPlot(pca.res$ExPosition.Data$fj,cex=1,col="mediumorchid4",contributions=pca.res$ExPosition.Data$cj,contributionCircles=T)#
peeledHull(t(boot.vars[1,,]))
boot.vars
supplementaryCols(boot.pca, pca.res)$fjj
boot.vars[1,,1]
boot.vars[1000,,1]
boot.vars[100,,1]
boot.vars[1,,1000]
boot.vars[1,1:2,]
prettyPlot(pca.res$ExPosition.Data$fj,cex=1,col="mediumorchid4",contributions=pca.res$ExPosition.Data$cj,contributionCircles=T)#
peeledHull(t(boot.vars[1,1:2,]))
prettyPlot(pca.res$ExPosition.Data$fj,cex=1,col="mediumorchid4",contributions=pca.res$ExPosition.Data$cj,contributionCircles=T)#
peeledHull(t(boot.vars[2,1:2,]))
prettyPlot(pca.res$ExPosition.Data$fj,cex=1,col="mediumorchid4",contributions=pca.res$ExPosition.Data$cj,contributionCircles=T)#
peeledHull(t(boot.vars[3,1:2,]))
boot.pca
library(InPosition)
epPCA.inference.battery
boot.compute.fj
iters <- 1000#
boot.comps <- matrix(NA,iters,length(pca.res$ExPosition.Data$eigs))#
boot.vars <- array(NA,dim=c(nrow(pca.res$ExPosition.Data$fj),ncol(pca.res$ExPosition.Data$fj),iters))#
#
for(i in 1:iters){#
	boot.indices <- sample(nrow(DATA),nrow(DATA),replace=T)#
	boot.pca <- DATA[boot.indices,]#
	boot.pca.res <- epPCA(boot.pca,scale=T,graphs=F)#
	boot.comps[i,1:length(boot.pca.res$ExPosition.Data$eigs)] <- boot.pca.res$ExPosition.Data$eigs#
	if(i%%100==0){#
		print(i)#
	}#
	## project and store#
	boot.vars[,,i] <- boot.compute.fj(DATA, res = pca.res)#
}
prettyPlot(pca.res$ExPosition.Data$fj,cex=1,col="mediumorchid4",contributions=pca.res$ExPosition.Data$cj,contributionCircles=T)#
peeledHull(t(boot.vars[3,1:2,]))
prettyPlot(pca.res$ExPosition.Data$fj,cex=1,col="mediumorchid4",contributions=pca.res$ExPosition.Data$cj,contributionCircles=T)#
#
for(i in 1:3){#
peeledHull(t(boot.vars[i,1:2,]))#
}
prettyPlot(pca.res$ExPosition.Data$fj,cex=1,col=c("red","green","blue"),contributions=pca.res$ExPosition.Data$cj,contributionCircles=T)
prettyPlot(pca.res$ExPosition.Data$fj,cex=1,col=c("red","green","blue"),contributions=pca.res$ExPosition.Data$cj,contributionCircles=T)#
for(i in 1:100){#
	prettyPlot(boot.vars[,,i],col=c("red","green","blue"),dev.new=F,axes=F,new.plot=F)#
}
prettyPlot(pca.res$ExPosition.Data$fj,cex=1,col=c("red","green","blue"),contributions=pca.res$ExPosition.Data$cj,contributionCircles=T)#
for(i in 1:100){#
	prettyPlot(boot.vars[,,i],col=c("red","green","blue"),dev.new=F,axes=F,new.plot=F)#
}#
prettyPlot(pca.res$ExPosition.Data$fj,cex=1,col=c("red","green","blue"),contributions=pca.res$ExPosition.Data$cj,contributionCircles=T,dev.new=F,axes=F,new.plot=F)
prettyPlot(pca.res$ExPosition.Data$fj,cex=1,col=c("red","green","blue"),contributions=pca.res$ExPosition.Data$cj,contributionCircles=T)#
these.cols <- c("red","green","blue")#
for(i in 1:3){#
	peeledHull(t(boot.vars[i,1:2,]),col=these.cols[i],percentage=.95)#
}
boot.compute.fj
boot.ratio.test(boot.vars)
boot.ratio.test(boot.vars)$boot.ratios
round(boot.ratio.test(boot.vars)$boot.ratios,digits=2)
pca.res$ExPosition.Data$fj
