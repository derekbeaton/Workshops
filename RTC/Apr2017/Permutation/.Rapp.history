rm(list=ls())#
gc()#
#
load('../LCBO.TW.CAD.rda')
LCBO.TW.CAD
rm(list=ls())#
gc()#
#
load('../LCBO.TW.CAD.rda')#
PRICE.DATA <- LCBO.TW.CAD[,c("LCBO_CAD_serving","TW_CAD_serving")]#
	colnames(PRICE.DATA) <- c("LCBO_CAD","TW_CAD")#
cost.ratio <- LCBO.TW.CAD[,"LCBO.v.TW_CostRatio"]
dev.new()#
plot(PRICE.DATA,pch=20,asp=1,main="American Beer in CAD (355ml serving)\n",xlab="CAD: LCBO",ylab="CAD: TW",col="mediumorchid4",cex=2)#
text(PRICE.DATA,labels=rownames(PRICE.DATA),pos=3,cex=.65,col="mediumorchid4")
dev.new()#
plot(PRICE.DATA,pch=20,asp=1,main=paste0("American Beer in CAD (355ml serving)\n r = ", round(cor.test.res$estimate,digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col="mediumorchid4",cex=2)#
text(PRICE.DATA,labels=rownames(PRICE.DATA),pos=3,cex=.65,col="mediumorchid4")#
#
dev.new()#
plot(PRICE.DATA,pch=20,asp=1,main=paste0("American Beer in CAD (355ml serving)\n r = ", round(cor.test.res$estimate,digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col=ifelse(cost.ratio>1,"mediumorchid4","olivedrab4"),cex=2)#
text(PRICE.DATA,labels=rownames(PRICE.DATA),pos=3,cex=.65,col=ifelse(cost.ratio>1,"mediumorchid4","olivedrab4"))
cor.test.res <- cor.test(PRICE.DATA[,1],PRICE.DATA[,2])
dev.new()#
plot(PRICE.DATA,pch=20,asp=1,main="American Beer in CAD (355ml serving)\n",xlab="CAD: LCBO",ylab="CAD: TW",col="mediumorchid4",cex=2)#
text(PRICE.DATA,labels=rownames(PRICE.DATA),pos=3,cex=.65,col="mediumorchid4")#
#
dev.new()#
plot(PRICE.DATA,pch=20,asp=1,main=paste0("American Beer in CAD (355ml serving)\n r = ", round(cor.test.res$estimate,digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col="mediumorchid4",cex=2)#
text(PRICE.DATA,labels=rownames(PRICE.DATA),pos=3,cex=.65,col="mediumorchid4")#
#
dev.new()#
plot(PRICE.DATA,pch=20,asp=1,main=paste0("American Beer in CAD (355ml serving)\n r = ", round(cor.test.res$estimate,digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col=ifelse(cost.ratio>1,"mediumorchid4","olivedrab4"),cex=2)#
text(PRICE.DATA,labels=rownames(PRICE.DATA),pos=3,cex=.65,col=ifelse(cost.ratio>1,"mediumorchid4","olivedrab4"))
set.seed(13)		## set a seed for the random number generator so we can recreate the result exactly#
perm.1 <- cbind(PRICE.DATA[,1],sample(PRICE.DATA[,2]))#
	rownames(perm.1) <- rownames(PRICE.DATA)#
	colnames(perm.1) <- colnames(PRICE.DATA)
rm(list=ls())#
gc()#
#
# library(ExPosition)#
# library(ez)#
# library(psych)#
#
	## load data for this example#
load('../LCBO.TW.CAD.rda')#
#
	## split the data into two separate variables for later use#
PRICE.DATA <- LCBO.TW.CAD[,c("LCBO_CAD_serving","TW_CAD_serving")]#
	colnames(PRICE.DATA) <- c("LCBO_CAD","TW_CAD")#
cost.ratio <- LCBO.TW.CAD[,"LCBO.v.TW_CostRatio"]#
#
	## parametric approach.#
cor.test.res <- cor.test(PRICE.DATA[,1],PRICE.DATA[,2])#
#
### Rule 0: Visualize your data, espeically before you do anything.#
dev.new()#
plot(PRICE.DATA,pch=20,asp=1,main="American Beer in CAD (355ml serving)\n",xlab="CAD: LCBO",ylab="CAD: TW",col="mediumorchid4",cex=2)#
text(PRICE.DATA,labels=rownames(PRICE.DATA),pos=3,cex=.65,col="mediumorchid4")#
#
dev.new()#
plot(PRICE.DATA,pch=20,asp=1,main=paste0("American Beer in CAD (355ml serving)\n r = ", round(cor.test.res$estimate,digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col="mediumorchid4",cex=2)#
text(PRICE.DATA,labels=rownames(PRICE.DATA),pos=3,cex=.65,col="mediumorchid4")#
#
dev.new()#
plot(PRICE.DATA,pch=20,asp=1,main=paste0("American Beer in CAD (355ml serving)\n r = ", round(cor.test.res$estimate,digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col=ifelse(cost.ratio>1,"mediumorchid4","olivedrab4"),cex=2)#
text(PRICE.DATA,labels=rownames(PRICE.DATA),pos=3,cex=.65,col=ifelse(cost.ratio>1,"mediumorchid4","olivedrab4"))#
##############
##########
######
#				What does permutation look like?#
######
##########
##############
set.seed(13)		## set a seed for the random number generator so we can recreate the result exactly#
perm.1 <- cbind(PRICE.DATA[,1],sample(PRICE.DATA[,2]))#
	rownames(perm.1) <- rownames(PRICE.DATA)#
	colnames(perm.1) <- colnames(PRICE.DATA)
dev.new()#
plot(perm.1,pch=20,asp=1,main=paste0("PERMUTED American Beer in CAD (355ml serving)\n r = ", round(cor(perm.1)[2,1],digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col="mediumorchid4",cex=2)#
text(perm.1,labels=rownames(perm.1),pos=3,cex=.65,col="mediumorchid4")
cor.test.res$p.value
1/cor.test.res$p.value
rm(list=ls())#
gc()#
#
# library(ExPosition)#
# library(ez)#
# library(psych)#
#
	## load data for this example#
load('../LCBO.TW.CAD.rda')#
#
	## split the data into two separate variables for later use#
PRICE.DATA <- LCBO.TW.CAD[,c("LCBO_CAD_serving","TW_CAD_serving")]#
	colnames(PRICE.DATA) <- c("LCBO_CAD","TW_CAD")#
cost.ratio <- LCBO.TW.CAD[,"LCBO.v.TW_CostRatio"]#
#
	## parametric approach.#
cor.test.res <- cor.test(PRICE.DATA[,1],PRICE.DATA[,2])#
#
### Rule 0: Visualize your data, espeically before you do anything.#
dev.new()#
plot(PRICE.DATA,pch=20,asp=1,main="American Beer in CAD (355ml serving)\n",xlab="CAD: LCBO",ylab="CAD: TW",col="mediumorchid4",cex=2)#
text(PRICE.DATA,labels=rownames(PRICE.DATA),pos=3,cex=.65,col="mediumorchid4")#
#
dev.new()#
plot(PRICE.DATA,pch=20,asp=1,main=paste0("American Beer in CAD (355ml serving)\n r = ", round(cor.test.res$estimate,digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col="mediumorchid4",cex=2)#
text(PRICE.DATA,labels=rownames(PRICE.DATA),pos=3,cex=.65,col="mediumorchid4")#
#
dev.new()#
plot(PRICE.DATA,pch=20,asp=1,main=paste0("American Beer in CAD (355ml serving)\n r = ", round(cor.test.res$estimate,digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col=ifelse(cost.ratio>1,"mediumorchid4","olivedrab4"),cex=2)#
text(PRICE.DATA,labels=rownames(PRICE.DATA),pos=3,cex=.65,col=ifelse(cost.ratio>1,"mediumorchid4","olivedrab4"))#
##############
##########
######
#				What does permutation look like?#
######
##########
##############
#
set.seed(13)		## set a seed for the random number generator so we can recreate the result exactly#
#
## A permutation#
perm.1 <- cbind(PRICE.DATA[,1],sample(PRICE.DATA[,2]))#
	rownames(perm.1) <- rownames(PRICE.DATA)#
	colnames(perm.1) <- colnames(PRICE.DATA)	#
#
dev.new()#
plot(perm.1,pch=20,asp=1,main=paste0("PERMUTED American Beer in CAD (355ml serving)\n r = ", round(cor(perm.1)[2,1],digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col="mediumorchid4",cex=2)#
text(perm.1,labels=rownames(perm.1),pos=3,cex=.65,col="mediumorchid4")#
## Another permutation	#
perm.2 <- cbind(PRICE.DATA[,1],sample(PRICE.DATA[,2]))#
	rownames(perm.2) <- rownames(PRICE.DATA)#
	colnames(perm.2) <- colnames(PRICE.DATA)		#
	## save this out	#
dev.new()#
plot(perm.2,pch=20,asp=1,main=paste0("PERMUTED American Beer in CAD (355ml serving)\n r = ", round(cor(perm.2)[2,1],digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col="mediumorchid4",cex=2)#
text(perm.2,labels=rownames(perm.2),pos=3,cex=.65,col="mediumorchid4")#
## Permute a column to break the relationship. Save the r values in a vector.#
iters <- 1000#
## NOTE: The real number of iterations we *should* do is: (1/cor.test.res$p.value)+1#
perm.rs <- vector("numeric",iters)#
for(i in 1:iters){#
	perm.rs[i] <- cor(PRICE.DATA[,1],sample(PRICE.DATA[,2]))#
}
## First we visualize the distribution of permuted r values#
dev.new()#
hist(perm.rs,breaks=50,xlim=c(-1,1),border="white",col="mediumorchid4",main="Permutation Distribution",xlab="Permuted correlations")
## Next we visualize the cutoffs for a two-tailed test#
cut.offs <- sort(perm.rs)[round(c(length(perm.rs)*.025,length(perm.rs)*.975))]#
dev.new()#
hist(perm.rs,breaks=50,xlim=c(-1,1),border="white",col="mediumorchid4",main="Permutation: Two-tailed",xlab="Permuted correlations")#
abline(v= cut.offs[1],col="firebrick3",lty=2,lwd=1.75)#
abline(v= cut.offs[2],col="firebrick3",lty=2,lwd=1.75)#
abline(v= cor.test.res$estimate,col="olivedrab3",lty=1,lwd=1.75)
## Or we can just do a one-tail test of r-squared#
cut.off <- sort(perm.rs^2)[round(length(perm.rs)*.95)]#
dev.new()#
hist(perm.rs^2,breaks=25,xlim=c(-1,1),border="white",col="mediumorchid4",main="Permutation: Two-tailed",xlab="Permuted r-squared")#
abline(v= cut.offs[1],col="firebrick3",lty=2,lwd=1.75)#
abline(v= cor.test.res$estimate^2,col="olivedrab3",lty=1,lwd=1.75)
cut.off
## Or we can just do a one-tail test of r-squared#
cut.off <- sort(perm.rs^2)[round(length(perm.rs)*.95)]#
dev.new()#
hist(perm.rs^2,breaks=25,xlim=c(0,1),border="white",col="mediumorchid4",main="Permutation: Two-tailed",xlab="Permuted r-squared")#
abline(v= cut.offs[1],col="firebrick3",lty=2,lwd=1.75)#
abline(v= cor.test.res$estimate^2,col="olivedrab3",lty=1,lwd=1.75)
## Or we can just do a one-tail test of r-squared#
cut.off <- sort(perm.rs^2)[round(length(perm.rs)*.95)]#
dev.new()#
hist(perm.rs^2,breaks=25,xlim=c(0,1),border="white",col="mediumorchid4",main="Permutation: Two-tailed",xlab="Permuted r-squared")#
abline(v= cut.off,col="firebrick3",lty=2,lwd=1.75)#
abline(v= cor.test.res$estimate^2,col="olivedrab3",lty=1,lwd=1.75)
cut.off <- sort(perm.rs)[round(length(perm.rs)*.95)]#
dev.new()#
hist(perm.rs,breaks=50,xlim=c(-1,1),border="white",col="mediumorchid4",main="Permutation: One-tailed",xlab="Permuted correlations")#
abline(v= cut.off,col="firebrick3",lty=2,lwd=1.75)#
abline(v= cor.test.res$estimate,col="olivedrab3",lty=1,lwd=1.75)
## one tail r test#
	one.tail.cor.p <- max(1/iters,sum(perm.rs > cor.test.res$estimate)/iters)#
## "two tailed" via r-squared test#
	two.tail.r2.p <- max(1/iters,sum(perm.rs^2 > cor.test.res$estimate^2)/iters)
one.tail.cor.p
rm(list=ls())#
gc()#
#
# library(ExPosition)#
library(ez)#
# library(psych)#
#
	## load data for this example#
load('../REGION.STYLE.RATING.rda')
colnames(REGION.STYLE.RATING)
rm(list=ls())#
gc()#
#
# library(ExPosition)#
library(ez)#
# library(psych)#
#
	## load data for this example#
load('../REGION.STYLE.RATING.rda')#
#
# PERMUTATION FOR ANOVA -- NOT SO BAD.#
ratings_anova = ezANOVA(#
    data = REGION.STYLE.RATING#
    , dv = RATEBEER_StyleRating#
    , BEER.NAME#
    , between = c(REGION,PALE.v.NOT)#
    , type = 3#
)
dev.new()#
interaction.plot(REGION.STYLE.RATING$REGION, REGION.STYLE.RATING$PALE.v.NOT, REGION.STYLE.RATING$RATEBEER_StyleRating,type="b",xlab="REGION",ylab="STYLE RATINGS",trace.label="",pch=c(20,22),cex=2,lwd=2,col=c("mediumorchid4","darkseagreen"))
perm.aov.1 <- transform(REGION.STYLE.RATING,RATEBEER_StyleRating=sample(RATEBEER_StyleRating))#
perm_anova_1 = ezANOVA(#
    data = perm.aov.1#
    , dv = RATEBEER_StyleRating#
    , BEER.NAME#
    , between = c(REGION,PALE.v.NOT)#
    , type = 3#
)
dev.new()#
interaction.plot(perm.aov.1$REGION, perm.aov.1$PALE.v.NOT, perm.aov.1$RATEBEER_StyleRating,type="b",xlab="REGION",ylab="STYLE RATINGS",trace.label="",pch=c(20,22),cex=2,lwd=2,col=c("mediumorchid4","darkseagreen"))
set.seed(13)		## set a seed for the random number generator so we can recreate the result exactly#
perm.aov.1 <- transform(REGION.STYLE.RATING,RATEBEER_StyleRating=sample(RATEBEER_StyleRating))#
perm_anova_1 = ezANOVA(#
    data = perm.aov.1#
    , dv = RATEBEER_StyleRating#
    , BEER.NAME#
    , between = c(REGION,PALE.v.NOT)#
    , type = 3#
)#
#
dev.new()#
interaction.plot(perm.aov.1$REGION, perm.aov.1$PALE.v.NOT, perm.aov.1$RATEBEER_StyleRating,type="b",xlab="REGION",ylab="STYLE RATINGS",trace.label="",pch=c(20,22),cex=2,lwd=2,col=c("mediumorchid4","darkseagreen"),main="PERMUTED: 2x2 ANOVA")#
perm.aov.2 <- transform(REGION.STYLE.RATING,RATEBEER_StyleRating=sample(RATEBEER_StyleRating))#
perm_anova_2 = ezANOVA(#
    data = perm.aov.2#
    , dv = RATEBEER_StyleRating#
    , BEER.NAME#
    , between = c(REGION,PALE.v.NOT)#
    , type = 3#
)#
#
dev.new()#
interaction.plot(perm.aov.2$REGION, perm.aov.2$PALE.v.NOT, perm.aov.2$RATEBEER_StyleRating,type="b",xlab="REGION",ylab="STYLE RATINGS",trace.label="",pch=c(20,22),cex=2,lwd=2,col=c("mediumorchid4","darkseagreen"),main="PERMUTED: 2x2 ANOVA")
max(round(1/ratings_anova$ANOVA$p))+1
## Permute *just* the dependent variable so that it is with the wrong set of factors. Save the F-values.#
iters <- 1000#
	## real iterations to do#
	#iters <- max(round(1/ratings_anova$ANOVA$p))+1#
perm.fs <- matrix(NA,iters,3)#
	colnames(perm.fs) <- c("REGION","PALE.v.NOT","REGION:PALE.v.NOT")#
for(i in 1:iters){#
	perm.aov <- transform(REGION.STYLE.RATING,RATEBEER_StyleRating=sample(RATEBEER_StyleRating))#
#
	perm_aov = suppressWarnings(ezANOVA(#
    data = perm.aov#
    , dv = RATEBEER_StyleRating#
    , BEER.NAME#
    , between = c(REGION,PALE.v.NOT)#
    , type = 3#
	))#
	### This takes a little bit longer than correlation, so we will tell ourselves on how many iterations it has been#
	perm.fs[i,] <- perm_aov$ANOVA$F#
	if(i%%10==0){#
		print(i)#
	}#
}
cut.off <- sort(perm.fs[,1])[round(nrow(perm.fs)*.95)]#
dev.new()#
hist(perm.fs[,1],breaks=100,xlim=c(-.1,max(ratings_anova$ANOVA$F,c(perm.fs))*1.1),border="white",col="mediumorchid4",main="Permutation F: REGION",xlab="Permuted Fs")#
abline(v= cut.off,col="firebrick3",lty=2,lwd=1.75)#
abline(v= ratings_anova$ANOVA$F[1],col="olivedrab3",lty=1,lwd=1.75)
cut.off <- sort(perm.fs[,1])[round(nrow(perm.fs)*.95)]#
dev.new()#
hist(perm.fs[,1],breaks=25,xlim=c(-.1,max(ratings_anova$ANOVA$F,c(perm.fs))*1.1),border="white",col="mediumorchid4",main="Permutation F: REGION",xlab="Permuted Fs")#
abline(v= cut.off,col="firebrick3",lty=2,lwd=1.75)#
abline(v= ratings_anova$ANOVA$F[1],col="olivedrab3",lty=1,lwd=1.75)
cut.off <- sort(perm.fs[,1])[round(nrow(perm.fs)*.95)]#
dev.new()#
hist(perm.fs[,1],breaks=50,xlim=c(-.1,max(ratings_anova$ANOVA$F,c(perm.fs))*1.1),border="white",col="mediumorchid4",main="Permutation F: REGION",xlab="Permuted Fs")#
abline(v= cut.off,col="firebrick3",lty=2,lwd=1.75)#
abline(v= ratings_anova$ANOVA$F[1],col="olivedrab3",lty=1,lwd=1.75)
cut.off <- sort(perm.fs[,2])[round(nrow(perm.fs)*.95)]#
dev.new()#
hist(perm.fs[,2],breaks=50,xlim=c(-.1,max(ratings_anova$ANOVA$F,c(perm.fs))*1.1),border="white",col="mediumorchid4",main="Permutation F: PALE.v.NOT",xlab="Permuted Fs")#
abline(v= cut.off,col="firebrick3",lty=2,lwd=1.75)#
abline(v= ratings_anova$ANOVA$F[2],col="olivedrab3",lty=1,lwd=1.75)
cut.off <- sort(perm.fs[,3])[round(nrow(perm.fs)*.95)]#
dev.new()#
hist(perm.fs[,3],breaks=50,xlim=c(-.1,max(ratings_anova$ANOVA$F,c(perm.fs))*1.1),border="white",col="mediumorchid4",main="Permutation F: INTERACTION",xlab="Permuted Fs")#
abline(v= cut.off,col="firebrick3",lty=2,lwd=1.75)#
abline(v= ratings_anova$ANOVA$F[3],col="olivedrab3",lty=1,lwd=1.75)
## Finally, we compute the p-values#
aov.ps <- colSums(perm.fs > matrix(ratings_anova$ANOVA$F,iters,3,byrow=T)) / iters#
aov.ps.adj <- pmax(aov.ps,1/iters)
aov.ps.adj
ratings_anova$ANOVA
max(round(1/ratings_anova$ANOVA$p))+1
rm(list=ls())#
gc()#
#
library(ExPosition)#
# library(ez)#
# library(psych)#
#
	## load data for this example#
load('../CAD.ABV.RATING.rda')#
DATA <- CAD.ABV.RATING[,1:3]#
DESIGN <- DESIGN#
pca.res <- epPCA(DATA,scale=T,DESIGN= DESIGN,graphs=F)#
prettyScree(pca.res$ExPosition.Data$eigs)
rm(list=ls())#
gc()#
#
library(ExPosition)#
# library(ez)#
# library(psych)#
#
	## load data for this example#
load('../CAD.ABV.RATING.rda')#
DATA <- CAD.ABV.RATING[,1:3]#
DESIGN <- CAD.ABV.RATING$REGION
pca.res <- epPCA(DATA,scale=T,DESIGN= DESIGN,graphs=F)
prettyScree(pca.res$ExPosition.Data$eigs)#
epGraphs(pca.res,contributionPlots=F,correlationPlotter=F)
rm(list=ls())#
gc()#
#
library(ExPosition)#
# library(ez)#
# library(psych)#
#
	## load data for this example#
load('../CAD.ABV.RATING.rda')#
#
	## split the data into a DATA variable and a DESIGN (which tells us where the beers are from)#
DATA <- CAD.ABV.RATING[,1:3]#
DESIGN <- CAD.ABV.RATING$REGION#
	## Standard PCA#
pca.res <- epPCA(DATA,scale=T,DESIGN= DESIGN,graphs=F)#
#
### Rule 0: Visualize your data, espeically before you do anything.#
	### Scree plot#
prettyScree(pca.res$ExPosition.Data$eigs)#
	### Component scores for rows and columns#
epGraphs(pca.res,contributionPlots=F,correlationPlotter=F)#
#
##############
##########
######
#				What does a permutation look like?#
######
##########
##############
#
set.seed(13)		## set a seed for the random number generator so we can recreate the result exactly#
#
## A permutation#
perm.pca.1 <- apply(DATA,2,sample)#
	rownames(perm.pca.1) <- rownames(CAD.ABV.RATING)#
perm.pca.res.1 <- epPCA(perm.pca.1,scale=T,DESIGN= DESIGN,graphs=F)#
prettyScree(perm.pca.res.1$ExPosition.Data$eigs)#
epGraphs(perm.pca.res.1,contributionPlots=F,correlationPlotter=F)#
#
## Another permutation#
perm.pca.2 <- apply(DATA,2,sample)#
	rownames(perm.pca.2) <- rownames(CAD.ABV.RATING)#
perm.pca.res.2 <- epPCA(perm.pca.2,scale=T,DESIGN= DESIGN,graphs=F)#
prettyScree(perm.pca.res.2$ExPosition.Data$eigs)#
epGraphs(perm.pca.res.2,contributionPlots=F,correlationPlotter=F)#
##############
##########
######
#				Turn permutation into a test#
######
##########
##############
#
## Permute *each* column to break the relationship. Save the eigenvalues.#
pca.iters <- 1000#
perm.comps <- matrix(NA,pca.iters,length(perm.pca.res.1$ExPosition.Data$eigs))#
#
for(i in 1:pca.iters){#
	perm.pca <- apply(DATA,2,sample)#
	perm.pca.res <- epPCA(perm.pca,scale=T,DESIGN= DESIGN,graphs=F)#
	perm.comps[i,1:length(perm.pca.res$ExPosition.Data$eigs)] <- perm.pca.res$ExPosition.Data$eigs#
	if(i%%10==0){#
		print(i)#
	}#
}#
## Visualize the distribution of permuted eigenvalues with cut-offs#
cut.off <- sort(perm.comps[,1])[round(nrow(perm.comps)*.95)]#
dev.new()#
hist(perm.comps[,1],breaks=50,xlim=c(min(pca.res$ExPosition.Data$eigs,c(perm.comps)),max(pca.res$ExPosition.Data$eigs,c(perm.comps))*1.1),border="white",col="mediumorchid4",main="Permutation Comp. 1",xlab="Permuted eigenvalues")#
abline(v= cut.off,col="firebrick3",lty=2,lwd=1.75)#
abline(v= pca.res$ExPosition.Data$eigs[1],col="olivedrab3",lty=1,lwd=1.75)#
#
cut.off <- sort(perm.comps[,2])[round(nrow(perm.comps)*.95)]#
dev.new()#
hist(perm.comps[,2],breaks=50,xlim=c(min(pca.res$ExPosition.Data$eigs,c(perm.comps)),max(pca.res$ExPosition.Data$eigs,c(perm.comps))*1.1),border="white",col="mediumorchid4",main="Permutation Comp. 2",xlab="Permuted eigenvalues")#
abline(v= cut.off,col="firebrick3",lty=2,lwd=1.75)#
abline(v= pca.res$ExPosition.Data$eigs[2],col="olivedrab3",lty=1,lwd=1.75)#
#
cut.off <- sort(perm.comps[,3])[round(nrow(perm.comps)*.95)]#
dev.new()#
hist(perm.comps[,3],breaks=50,xlim=c(min(pca.res$ExPosition.Data$eigs,c(perm.comps)),max(pca.res$ExPosition.Data$eigs,c(perm.comps))*1.1),border="white",col="mediumorchid4",main="Permutation Comp. 3",xlab="Permuted eigenvalues")#
abline(v= cut.off,col="firebrick3",lty=2,lwd=1.75)#
abline(v= pca.res$ExPosition.Data$eigs[3],col="olivedrab3",lty=1,lwd=1.75)#
#
## Finally, we compute the p-values#
pca.ps <- colSums(perm.comps > matrix(pca.res$ExPosition.Data$eigs,pca.iters,3,byrow=T)) / pca.iters#
pca.ps.adj <- pmax(pca.ps,1/pca.iters)
pca.ps.adj
rm(list=ls())#
gc()#
#
# library(ExPosition)#
# library(ez)#
# library(psych)#
#
	## load data for this example#
load('../Data/LCBO.TW.CAD.rda')#
#
	## split the data into two separate variables for later use#
PRICE.DATA <- LCBO.TW.CAD[,c("LCBO_CAD_serving","TW_CAD_serving")]#
	colnames(PRICE.DATA) <- c("LCBO_CAD","TW_CAD")#
cost.ratio <- LCBO.TW.CAD[,"LCBO.v.TW_CostRatio"]#
#
	## parametric approach.#
cor.test.res <- cor.test(PRICE.DATA[,1],PRICE.DATA[,2])#
#
### Rule 0: Visualize your data, espeically before you do anything.#
dev.new()#
plot(PRICE.DATA,pch=20,asp=1,main="American Beer in CAD (355ml serving)\n",xlab="CAD: LCBO",ylab="CAD: TW",col="mediumorchid4",cex=2)#
text(PRICE.DATA,labels=rownames(PRICE.DATA),pos=3,cex=.65,col="mediumorchid4")#
#
dev.new()#
plot(PRICE.DATA,pch=20,asp=1,main=paste0("American Beer in CAD (355ml serving)\n r = ", round(cor.test.res$estimate,digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col="mediumorchid4",cex=2)#
text(PRICE.DATA,labels=rownames(PRICE.DATA),pos=3,cex=.65,col="mediumorchid4")#
#
dev.new()#
plot(PRICE.DATA,pch=20,asp=1,main=paste0("American Beer in CAD (355ml serving)\n r = ", round(cor.test.res$estimate,digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col=ifelse(cost.ratio>1,"mediumorchid4","olivedrab4"),cex=2)#
text(PRICE.DATA,labels=rownames(PRICE.DATA),pos=3,cex=.65,col=ifelse(cost.ratio>1,"mediumorchid4","olivedrab4"))#
##############
##########
######
#				What does a permutation look like?#
######
##########
##############
#
set.seed(13)		## set a seed for the random number generator so we can recreate the result exactly#
#
## A permutation#
perm.1 <- cbind(PRICE.DATA[,1],sample(PRICE.DATA[,2]))#
	rownames(perm.1) <- rownames(PRICE.DATA)#
	colnames(perm.1) <- colnames(PRICE.DATA)	#
#
dev.new()#
plot(perm.1,pch=20,asp=1,main=paste0("PERMUTED American Beer in CAD (355ml serving)\n r = ", round(cor(perm.1)[2,1],digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col="mediumorchid4",cex=2)#
text(perm.1,labels=rownames(perm.1),pos=3,cex=.65,col="mediumorchid4")#
## Another permutation	#
perm.2 <- cbind(PRICE.DATA[,1],sample(PRICE.DATA[,2]))#
	rownames(perm.2) <- rownames(PRICE.DATA)#
	colnames(perm.2) <- colnames(PRICE.DATA)		#
	## save this out	#
dev.new()#
plot(perm.2,pch=20,asp=1,main=paste0("PERMUTED American Beer in CAD (355ml serving)\n r = ", round(cor(perm.2)[2,1],digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col="mediumorchid4",cex=2)#
text(perm.2,labels=rownames(perm.2),pos=3,cex=.65,col="mediumorchid4")#
##############
##########
######
#				Turn permutation into a test#
######
##########
##############
#
## Permute a column to break the relationship. Save the r values in a vector.#
iters <- 1000#
## NOTE: The real number of iterations we *should* do is: (1/cor.test.res$p.value)+1#
perm.rs <- vector("numeric",iters)#
for(i in 1:iters){#
	perm.rs[i] <- cor(PRICE.DATA[,1],sample(PRICE.DATA[,2]))#
}#
#
## First we visualize the distribution of permuted r values#
dev.new()#
hist(perm.rs,breaks=50,xlim=c(-1,1),border="white",col="mediumorchid4",main="Permutation Distribution",xlab="Permuted correlations")#
#
## Second we show a one-tailed test, assuming the direction of the observed statistic#
cut.off <- sort(perm.rs)[round(length(perm.rs)*.95)]#
dev.new()#
hist(perm.rs,breaks=50,xlim=c(-1,1),border="white",col="mediumorchid4",main="Permutation: One-tailed",xlab="Permuted correlations")#
abline(v= cut.off,col="firebrick3",lty=2,lwd=1.75)#
abline(v= cor.test.res$estimate,col="olivedrab3",lty=1,lwd=1.75)#
#
## Next we visualize the cutoffs for a two-tailed test#
cut.offs <- sort(perm.rs)[round(c(length(perm.rs)*.025,length(perm.rs)*.975))]#
dev.new()#
hist(perm.rs,breaks=50,xlim=c(-1,1),border="white",col="mediumorchid4",main="Permutation: Two-tailed",xlab="Permuted correlations")#
abline(v= cut.offs[1],col="firebrick3",lty=2,lwd=1.75)#
abline(v= cut.offs[2],col="firebrick3",lty=2,lwd=1.75)#
abline(v= cor.test.res$estimate,col="olivedrab3",lty=1,lwd=1.75)#
#
## Or we can just do a one-tail test of r-squared#
cut.off <- sort(perm.rs^2)[round(length(perm.rs)*.95)]#
dev.new()#
hist(perm.rs^2,breaks=25,xlim=c(0,1),border="white",col="mediumorchid4",main="Permutation: One-tailed R-squared",xlab="Permuted r-squared")#
abline(v= cut.off,col="firebrick3",lty=2,lwd=1.75)#
abline(v= cor.test.res$estimate^2,col="olivedrab3",lty=1,lwd=1.75)#
## Finally, we compute the p-values#
## one tail r test#
	one.tail.cor.p <- max(1/iters,sum(perm.rs > cor.test.res$estimate)/iters)#
## "two tailed" via r-squared test#
	two.tail.r2.p <- max(1/iters,sum(perm.rs^2 > cor.test.res$estimate^2)/iters)
rm(list=ls())#
gc()#
#
library(ExPosition)#
# library(ez)#
# library(psych)#
#
	## load data for this example#
load('../Data/CAD.ABV.RATING.rda')#
#
	## split the data into a DATA variable and a DESIGN (which tells us where the beers are from)#
DATA <- CAD.ABV.RATING[,1:3]#
DESIGN <- CAD.ABV.RATING$REGION#
	## Standard PCA#
pca.res <- epPCA(DATA,scale=T,DESIGN= DESIGN,graphs=F)#
#
### Rule 0: Visualize your data, espeically before you do anything.#
	### Scree plot#
prettyScree(pca.res$ExPosition.Data$eigs)#
	### Component scores for rows and columns#
epGraphs(pca.res,contributionPlots=F,correlationPlotter=F)#
#
##############
##########
######
#				What does a permutation look like?#
######
##########
##############
#
set.seed(13)		## set a seed for the random number generator so we can recreate the result exactly#
#
## A permutation#
perm.pca.1 <- apply(DATA,2,sample)#
	rownames(perm.pca.1) <- rownames(CAD.ABV.RATING)#
perm.pca.res.1 <- epPCA(perm.pca.1,scale=T,DESIGN= DESIGN,graphs=F)#
prettyScree(perm.pca.res.1$ExPosition.Data$eigs)#
epGraphs(perm.pca.res.1,contributionPlots=F,correlationPlotter=F)#
#
## Another permutation#
perm.pca.2 <- apply(DATA,2,sample)#
	rownames(perm.pca.2) <- rownames(CAD.ABV.RATING)#
perm.pca.res.2 <- epPCA(perm.pca.2,scale=T,DESIGN= DESIGN,graphs=F)#
prettyScree(perm.pca.res.2$ExPosition.Data$eigs)#
epGraphs(perm.pca.res.2,contributionPlots=F,correlationPlotter=F)#
##############
##########
######
#				Turn permutation into a test#
######
##########
##############
#
## Permute *each* column to break the relationship. Save the eigenvalues.#
pca.iters <- 1000#
perm.comps <- matrix(NA,pca.iters,length(perm.pca.res.1$ExPosition.Data$eigs))#
#
for(i in 1:pca.iters){#
	perm.pca <- apply(DATA,2,sample)#
	perm.pca.res <- epPCA(perm.pca,scale=T,DESIGN= DESIGN,graphs=F)#
	perm.comps[i,1:length(perm.pca.res$ExPosition.Data$eigs)] <- perm.pca.res$ExPosition.Data$eigs#
	if(i%%100==0){#
		print(i)#
	}#
}#
## Visualize the distribution of permuted eigenvalues with cut-offs#
cut.off <- sort(perm.comps[,1])[round(nrow(perm.comps)*.95)]#
dev.new()#
hist(perm.comps[,1],breaks=50,xlim=c(min(pca.res$ExPosition.Data$eigs,c(perm.comps)),max(pca.res$ExPosition.Data$eigs,c(perm.comps))*1.1),border="white",col="mediumorchid4",main="Permutation Comp. 1",xlab="Permuted eigenvalues")#
abline(v= cut.off,col="firebrick3",lty=2,lwd=1.75)#
abline(v= pca.res$ExPosition.Data$eigs[1],col="olivedrab3",lty=1,lwd=1.75)#
#
cut.off <- sort(perm.comps[,2])[round(nrow(perm.comps)*.95)]#
dev.new()#
hist(perm.comps[,2],breaks=50,xlim=c(min(pca.res$ExPosition.Data$eigs,c(perm.comps)),max(pca.res$ExPosition.Data$eigs,c(perm.comps))*1.1),border="white",col="mediumorchid4",main="Permutation Comp. 2",xlab="Permuted eigenvalues")#
abline(v= cut.off,col="firebrick3",lty=2,lwd=1.75)#
abline(v= pca.res$ExPosition.Data$eigs[2],col="olivedrab3",lty=1,lwd=1.75)#
#
cut.off <- sort(perm.comps[,3])[round(nrow(perm.comps)*.95)]#
dev.new()#
hist(perm.comps[,3],breaks=50,xlim=c(min(pca.res$ExPosition.Data$eigs,c(perm.comps)),max(pca.res$ExPosition.Data$eigs,c(perm.comps))*1.1),border="white",col="mediumorchid4",main="Permutation Comp. 3",xlab="Permuted eigenvalues")#
abline(v= cut.off,col="firebrick3",lty=2,lwd=1.75)#
abline(v= pca.res$ExPosition.Data$eigs[3],col="olivedrab3",lty=1,lwd=1.75)#
#
## Finally, we compute the p-values#
pca.ps <- colSums(perm.comps > matrix(pca.res$ExPosition.Data$eigs,pca.iters,3,byrow=T)) / pca.iters#
pca.ps.adj <- pmax(pca.ps,1/pca.iters)
pca.ps.adj
rm(list=ls())#
gc()#
#
# library(ExPosition)#
# library(ez)#
# library(psych)#
#
	## load data for this example#
load('../Data/LCBO.TW.CAD.rda')#
#
	## split the data into two separate variables for later use#
PRICE.DATA <- LCBO.TW.CAD[,c("LCBO_CAD_serving","TW_CAD_serving")]#
	colnames(PRICE.DATA) <- c("LCBO_CAD","TW_CAD")#
cost.ratio <- LCBO.TW.CAD[,"LCBO.v.TW_CostRatio"]#
#
	## parametric approach.#
cor.test.res <- cor.test(PRICE.DATA[,1],PRICE.DATA[,2])#
#
### Rule 0: Visualize your data, espeically before you do anything.#
dev.new()#
plot(PRICE.DATA,pch=20,asp=1,main="American Beer in CAD (355ml serving)\n",xlab="CAD: LCBO",ylab="CAD: TW",col="mediumorchid4",cex=2)#
text(PRICE.DATA,labels=rownames(PRICE.DATA),pos=3,cex=.65,col="mediumorchid4")#
#
dev.new()#
plot(PRICE.DATA,pch=20,asp=1,main=paste0("American Beer in CAD (355ml serving)\n r = ", round(cor.test.res$estimate,digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col="mediumorchid4",cex=2)#
text(PRICE.DATA,labels=rownames(PRICE.DATA),pos=3,cex=.65,col="mediumorchid4")#
#
dev.new()#
plot(PRICE.DATA,pch=20,asp=1,main=paste0("American Beer in CAD (355ml serving)\n r = ", round(cor.test.res$estimate,digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col=ifelse(cost.ratio>1,"mediumorchid4","olivedrab4"),cex=2)#
text(PRICE.DATA,labels=rownames(PRICE.DATA),pos=3,cex=.65,col=ifelse(cost.ratio>1,"mediumorchid4","olivedrab4"))
dev.new()#
plot(PRICE.DATA,pch=20,asp=1,main=paste0("American Beer in CAD (355ml serving)\n r = ", round(cor.test.res$estimate,digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col=ifelse(cost.ratio>1,"mediumorchid4","olivedrab4"),cex=2)#
text(PRICE.DATA,labels=rownames(PRICE.DATA),pos=3,cex=.65,col=ifelse(cost.ratio>1,"mediumorchid4","olivedrab4"))#
legend("topleft",legend=c("Less in USA","Less in CAN"),pch=20,col=c("mediumorchid4","olivedrab4"))
dev.new()#
plot(PRICE.DATA,pch=20,asp=1,main=paste0("American Beer in CAD (355ml serving)\n r = ", round(cor.test.res$estimate,digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col=ifelse(cost.ratio>1,"mediumorchid4","olivedrab4"),cex=2)#
text(PRICE.DATA,labels=rownames(PRICE.DATA),pos=3,cex=.65,col=ifelse(cost.ratio>1,"mediumorchid4","olivedrab4"))#
legend("topleft",legend=c("Less in USA","Less in CAN"),pch=20,col=c("mediumorchid4","olivedrab4"),cex=2)
dev.new()#
plot(PRICE.DATA,pch=20,asp=1,main=paste0("American Beer in CAD (355ml serving)\n r = ", round(cor.test.res$estimate,digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col=ifelse(cost.ratio>1,"mediumorchid4","olivedrab4"),cex=2)#
text(PRICE.DATA,labels=rownames(PRICE.DATA),pos=3,cex=.65,col=ifelse(cost.ratio>1,"mediumorchid4","olivedrab4"))#
legend("topleft",legend=c("Less in USA","Less in CAN"),pch=20,col=c("mediumorchid4","olivedrab4"),pt.cex=2)
rm(list=ls())#
gc()#
#
# library(ExPosition)#
# library(ez)#
# library(psych)#
#
	## load data for this example#
load('../Data/LCBO.TW.CAD.rda')#
#
	## split the data into two separate variables for later use#
PRICE.DATA <- LCBO.TW.CAD[,c("LCBO_CAD_serving","TW_CAD_serving")]#
	colnames(PRICE.DATA) <- c("LCBO_CAD","TW_CAD")
head(PRICE.DATA)
round(head(PRICE.DATA),digits=3)
round(head(PRICE.DATA),digits=2)
rm(list=ls())#
gc()#
#
# library(ExPosition)#
# library(ez)#
# library(psych)#
#
	## load data for this example#
load('../Data/LCBO.TW.CAD.rda')#
#
	## split the data into two separate variables for later use#
PRICE.DATA <- LCBO.TW.CAD[,c("LCBO_CAD_serving","TW_CAD_serving")]#
	colnames(PRICE.DATA) <- c("LCBO_CAD","TW_CAD")#
cost.ratio <- LCBO.TW.CAD[,"LCBO.v.TW_CostRatio"]#
#
	## parametric approach.#
cor.test.res <- cor.test(PRICE.DATA[,1],PRICE.DATA[,2])#
#
### Rule 0: Visualize your data, espeically before you do anything.#
dev.new()#
plot(PRICE.DATA,pch=20,asp=1,main="American Beer in CAD (355ml serving)\n",xlab="CAD: LCBO",ylab="CAD: TW",col="mediumorchid4",cex=2)#
text(PRICE.DATA,labels=rownames(PRICE.DATA),pos=3,cex=.65,col="mediumorchid4")
dev.new()#
plot(PRICE.DATA,pch=20,asp=1,main=paste0("American Beer in CAD (355ml serving)\n r = ", round(cor.test.res$estimate,digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col="mediumorchid4",cex=2)#
text(PRICE.DATA,labels=rownames(PRICE.DATA),pos=3,cex=.65,col="mediumorchid4")
cor.test.res
##############
##########
######
#				What does a permutation look like?#
######
##########
##############
#
set.seed(13)		## set a seed for the random number generator so we can recreate the result exactly#
#
## A permutation#
perm.1 <- cbind(PRICE.DATA[,1],sample(PRICE.DATA[,2]))#
	rownames(perm.1) <- rownames(PRICE.DATA)#
	colnames(perm.1) <- colnames(PRICE.DATA)	#
#
dev.new()#
plot(perm.1,pch=20,asp=1,main=paste0("PERMUTED American Beer in CAD (355ml serving)\n r = ", round(cor(perm.1)[2,1],digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col="mediumorchid4",cex=2)#
text(perm.1,labels=rownames(perm.1),pos=3,cex=.65,col="mediumorchid4")
## Another permutation	#
perm.2 <- cbind(PRICE.DATA[,1],sample(PRICE.DATA[,2]))#
	rownames(perm.2) <- rownames(PRICE.DATA)#
	colnames(perm.2) <- colnames(PRICE.DATA)		#
	## save this out	#
dev.new()#
plot(perm.2,pch=20,asp=1,main=paste0("PERMUTED American Beer in CAD (355ml serving)\n r = ", round(cor(perm.2)[2,1],digits=3)),xlab="CAD: LCBO",ylab="CAD: TW",col="mediumorchid4",cex=2)#
text(perm.2,labels=rownames(perm.2),pos=3,cex=.65,col="mediumorchid4")
##############
##########
######
#				Turn permutation into a test#
######
##########
##############
#
## Permute a column to break the relationship. Save the r values in a vector.#
iters <- 1000#
## NOTE: The real number of iterations we *should* do is: (1/cor.test.res$p.value)+1#
perm.rs <- vector("numeric",iters)#
for(i in 1:iters){#
	perm.rs[i] <- cor(PRICE.DATA[,1],sample(PRICE.DATA[,2]))#
}#
#
## First we visualize the distribution of permuted r values#
dev.new()#
hist(perm.rs,breaks=50,xlim=c(-1,1),border="white",col="mediumorchid4",main="Permutation Distribution",xlab="Permuted correlations")
## Second we show a one-tailed test, assuming the direction of the observed statistic#
cut.off <- sort(perm.rs)[round(length(perm.rs)*.95)]#
dev.new()#
hist(perm.rs,breaks=50,xlim=c(-1,1),border="white",col="mediumorchid4",main="Permutation: One-tailed",xlab="Permuted correlations")#
abline(v= cut.off,col="firebrick3",lty=2,lwd=1.75)#
abline(v= cor.test.res$estimate,col="olivedrab3",lty=1,lwd=1.75)#
#
## Next we visualize the cutoffs for a two-tailed test#
cut.offs <- sort(perm.rs)[round(c(length(perm.rs)*.025,length(perm.rs)*.975))]#
dev.new()#
hist(perm.rs,breaks=50,xlim=c(-1,1),border="white",col="mediumorchid4",main="Permutation: Two-tailed",xlab="Permuted correlations")#
abline(v= cut.offs[1],col="firebrick3",lty=2,lwd=1.75)#
abline(v= cut.offs[2],col="firebrick3",lty=2,lwd=1.75)#
abline(v= cor.test.res$estimate,col="olivedrab3",lty=1,lwd=1.75)#
#
## Or we can just do a one-tail test of r-squared#
cut.off <- sort(perm.rs^2)[round(length(perm.rs)*.95)]#
dev.new()#
hist(perm.rs^2,breaks=25,xlim=c(0,1),border="white",col="mediumorchid4",main="Permutation: One-tailed R-squared",xlab="Permuted r-squared")#
abline(v= cut.off,col="firebrick3",lty=2,lwd=1.75)#
abline(v= cor.test.res$estimate^2,col="olivedrab3",lty=1,lwd=1.75)
cor.test.res
load("/Volumes/JOHNNYFIVE/Personal/Webbles/BEER_CAN/CleanData_Code/SlidePictures/Permutation/PERM_DONE.RData")
two.tail.r2.p <- max(1/iters,sum(perm.rs^2 > cor.test.res$estimate^2)/iters)
two.tail.r2.p
one.tail.cor.p <- max(1/iters,sum(perm.rs > cor.test.res$estimate)/iters)
one.tail.cor.p
rm(list=ls())#
gc()#
#
# library(ExPosition)#
# library(ez)#
# library(psych)#
#
	## load data for this example#
load('../Data/LCBO.TW.CAD.rda')
ls()
## split the data into two separate variables for later use#
PRICE.DATA <- LCBO.TW.CAD[,c("LCBO_CAD_serving","TW_CAD_serving")]#
	colnames(PRICE.DATA) <- c("LCBO_CAD","TW_CAD")#
cost.ratio <- LCBO.TW.CAD[,"LCBO.v.TW_CostRatio"]
dim(PRICE.DATA)
rm(list=ls())#
gc()#
#
# library(ExPosition)#
library(ez)#
# library(psych)#
#
	## load data for this example#
load('../Data/REGION.STYLE.RATING.rda')#
#
	## parametric approach, with the ez package#
ratings_anova = ezANOVA(#
    data = REGION.STYLE.RATING#
    , dv = RATEBEER_StyleRating#
    , wid = BEER.NAME#
    , between = c(REGION,PALE.v.NOT)#
    , type = 3#
)#
#
### Rule 0: Visualize your data, espeically before you do anything.#
dev.new()#
interaction.plot(REGION.STYLE.RATING$REGION, REGION.STYLE.RATING$PALE.v.NOT, REGION.STYLE.RATING$RATEBEER_StyleRating,type="b",xlab="REGION",ylab="STYLE RATINGS",trace.label="",pch=c(20,22),cex=2,lwd=2,col=c("mediumorchid4","darkseagreen"),main="2x2 ANOVA")
REGION.STYLE.RATING
head(REGION.STYLE.RATING)
dim(REGION.STYLE.RATING)
?head
tail(REGION.STYLE.RATING)
rm(list=ls())#
gc()#
#
# library(ExPosition)#
library(ez)#
# library(psych)#
#
	## load data for this example#
load('../Data/REGION.STYLE.RATING.rda')#
#
	## parametric approach, with the ez package#
ratings_anova = ezANOVA(#
    data = REGION.STYLE.RATING#
    , dv = RATEBEER_StyleRating#
    , wid = BEER.NAME#
    , between = c(REGION,PALE.v.NOT)#
    , type = 3#
)#
#
### Rule 0: Visualize your data, espeically before you do anything.#
dev.new()#
interaction.plot(REGION.STYLE.RATING$REGION, REGION.STYLE.RATING$PALE.v.NOT, REGION.STYLE.RATING$RATEBEER_StyleRating,type="b",xlab="REGION",ylab="STYLE RATINGS",trace.label="",pch=c(20,22),cex=2,lwd=2,col=c("mediumorchid4","darkseagreen"),main="2x2 ANOVA")
ratings_anova$ANOVA
##############
##########
######
#				What does a permutation look like?#
######
##########
##############
#
set.seed(13)		## set a seed for the random number generator so we can recreate the result exactly#
perm.aov.1 <- transform(REGION.STYLE.RATING,RATEBEER_StyleRating=sample(RATEBEER_StyleRating))#
perm_anova_1 = ezANOVA(#
    data = perm.aov.1#
    , dv = RATEBEER_StyleRating#
    , wid = BEER.NAME#
    , between = c(REGION,PALE.v.NOT)#
    , type = 3#
)#
#
dev.new()#
interaction.plot(perm.aov.1$REGION, perm.aov.1$PALE.v.NOT, perm.aov.1$RATEBEER_StyleRating,type="b",xlab="REGION",ylab="STYLE RATINGS",trace.label="",pch=c(20,22),cex=2,lwd=2,col=c("mediumorchid4","darkseagreen"),main="PERMUTED: 2x2 ANOVA")
perm_anova_1$ANOVA
perm.aov.2 <- transform(REGION.STYLE.RATING,RATEBEER_StyleRating=sample(RATEBEER_StyleRating))#
perm_anova_2 = ezANOVA(#
    data = perm.aov.2#
    , dv = RATEBEER_StyleRating#
    , wid = BEER.NAME#
    , between = c(REGION,PALE.v.NOT)#
    , type = 3#
)
perm_anova_2$ANOVA
perm.aov.2 <- transform(REGION.STYLE.RATING,RATEBEER_StyleRating=sample(RATEBEER_StyleRating))#
perm_anova_2 = ezANOVA(#
    data = perm.aov.2#
    , dv = RATEBEER_StyleRating#
    , wid = BEER.NAME#
    , between = c(REGION,PALE.v.NOT)#
    , type = 3#
)
perm_anova_2$ANOVA
## Permute *just* the dependent variable so that it is with the wrong set of factors. Save the F-values.#
iters <- 1000#
	## real iterations to do#
	#iters <- max(round(1/ratings_anova$ANOVA$p))+1#
perm.fs <- matrix(NA,iters,3)#
	colnames(perm.fs) <- c("REGION","PALE.v.NOT","REGION:PALE.v.NOT")#
for(i in 1:iters){#
	perm.aov <- transform(REGION.STYLE.RATING,RATEBEER_StyleRating=sample(RATEBEER_StyleRating))#
#
	perm_aov = suppressWarnings(ezANOVA(#
    data = perm.aov#
    , dv = RATEBEER_StyleRating#
    , wid = BEER.NAME#
    , between = c(REGION,PALE.v.NOT)#
    , type = 3#
	))#
	### This takes a little bit longer than correlation, so we will tell ourselves on how many iterations it has been#
	perm.fs[i,] <- perm_aov$ANOVA$F#
	if(i%%10==0){#
		print(i)#
	}#
}
## Visualize all the permuted F distributions with cut-offs and observed statistics#
cut.off <- sort(perm.fs[,1])[round(nrow(perm.fs)*.95)]#
dev.new()#
hist(perm.fs[,1],breaks=50,xlim=c(-.1,max(ratings_anova$ANOVA$F,c(perm.fs))*1.1),border="white",col="mediumorchid4",main="Permutation F: REGION",xlab="Permuted Fs")#
abline(v= cut.off,col="firebrick3",lty=2,lwd=1.75)#
abline(v= ratings_anova$ANOVA$F[1],col="olivedrab3",lty=1,lwd=1.75)#
#
cut.off <- sort(perm.fs[,2])[round(nrow(perm.fs)*.95)]#
dev.new()#
hist(perm.fs[,2],breaks=50,xlim=c(-.1,max(ratings_anova$ANOVA$F,c(perm.fs))*1.1),border="white",col="mediumorchid4",main="Permutation F: PALE.v.NOT",xlab="Permuted Fs")#
abline(v= cut.off,col="firebrick3",lty=2,lwd=1.75)#
abline(v= ratings_anova$ANOVA$F[2],col="olivedrab3",lty=1,lwd=1.75)#
#
cut.off <- sort(perm.fs[,3])[round(nrow(perm.fs)*.95)]#
dev.new()#
hist(perm.fs[,3],breaks=50,xlim=c(-.1,max(ratings_anova$ANOVA$F,c(perm.fs))*1.1),border="white",col="mediumorchid4",main="Permutation F: INTERACTION",xlab="Permuted Fs")#
abline(v= cut.off,col="firebrick3",lty=2,lwd=1.75)#
abline(v= ratings_anova$ANOVA$F[3],col="olivedrab3",lty=1,lwd=1.75)
## Finally, we compute the p-values#
aov.ps <- colSums(perm.fs > matrix(ratings_anova$ANOVA$F,iters,3,byrow=T)) / iters#
aov.ps.adj <- pmax(aov.ps,1/iters)
aov.ps.adj
ratings_anova$ANOVA
rm(list=ls())#
gc()#
#
library(ExPosition)#
# library(ez)#
# library(psych)#
#
	## load data for this example#
load('../Data/CAD.ABV.RATING.rda')#
#
	## split the data into a DATA variable and a DESIGN (which tells us where the beers are from)#
DATA <- CAD.ABV.RATING[,1:3]#
DESIGN <- CAD.ABV.RATING$REGION
head(DATA)
round(head(DATA),digits=2)
round(head(apply(DATA,2,sample),digits=2)
)
round(head(apply(DATA,2,sample)),digits=2)
apply(round(head(DATA),digits=2),2,sample)
rm(list=ls())#
gc()#
#
library(ExPosition)#
# library(ez)#
# library(psych)#
#
	## load data for this example#
load('../Data/CAD.ABV.RATING.rda')#
#
	## split the data into a DATA variable and a DESIGN (which tells us where the beers are from)#
DATA <- CAD.ABV.RATING[,1:3]#
DESIGN <- CAD.ABV.RATING$REGION#
	## Standard PCA#
pca.res <- epPCA(DATA,scale=T,DESIGN= DESIGN,graphs=F)#
#
### Rule 0: Visualize your data, espeically before you do anything.#
	### Scree plot#
prettyScree(pca.res$ExPosition.Data$eigs)#
	### Component scores for rows and columns#
epGraphs(pca.res,contributionPlots=F,correlationPlotter=F)
##############
##########
######
#				What does a permutation look like?#
######
##########
##############
#
set.seed(13)		## set a seed for the random number generator so we can recreate the result exactly#
#
## A permutation#
perm.pca.1 <- apply(DATA,2,sample)#
	rownames(perm.pca.1) <- rownames(CAD.ABV.RATING)#
perm.pca.res.1 <- epPCA(perm.pca.1,scale=T,DESIGN= DESIGN,graphs=F)#
prettyScree(perm.pca.res.1$ExPosition.Data$eigs)#
epGraphs(perm.pca.res.1,contributionPlots=F,correlationPlotter=F)
## Permute *each* column to break the relationship. Save the eigenvalues.#
pca.iters <- 1000#
perm.comps <- matrix(NA,pca.iters,length(perm.pca.res.1$ExPosition.Data$eigs))#
#
for(i in 1:pca.iters){#
	perm.pca <- apply(DATA,2,sample)#
	perm.pca.res <- epPCA(perm.pca,scale=T,DESIGN= DESIGN,graphs=F)#
	perm.comps[i,1:length(perm.pca.res$ExPosition.Data$eigs)] <- perm.pca.res$ExPosition.Data$eigs#
	if(i%%100==0){#
		print(i)#
	}#
}#
## Visualize the distribution of permuted eigenvalues with cut-offs#
cut.off <- sort(perm.comps[,1])[round(nrow(perm.comps)*.95)]#
dev.new()#
hist(perm.comps[,1],breaks=50,xlim=c(min(pca.res$ExPosition.Data$eigs,c(perm.comps)),max(pca.res$ExPosition.Data$eigs,c(perm.comps))*1.1),border="white",col="mediumorchid4",main="Permutation Comp. 1",xlab="Permuted eigenvalues")#
abline(v= cut.off,col="firebrick3",lty=2,lwd=1.75)#
abline(v= pca.res$ExPosition.Data$eigs[1],col="olivedrab3",lty=1,lwd=1.75)#
#
cut.off <- sort(perm.comps[,2])[round(nrow(perm.comps)*.95)]#
dev.new()#
hist(perm.comps[,2],breaks=50,xlim=c(min(pca.res$ExPosition.Data$eigs,c(perm.comps)),max(pca.res$ExPosition.Data$eigs,c(perm.comps))*1.1),border="white",col="mediumorchid4",main="Permutation Comp. 2",xlab="Permuted eigenvalues")#
abline(v= cut.off,col="firebrick3",lty=2,lwd=1.75)#
abline(v= pca.res$ExPosition.Data$eigs[2],col="olivedrab3",lty=1,lwd=1.75)#
#
cut.off <- sort(perm.comps[,3])[round(nrow(perm.comps)*.95)]#
dev.new()#
hist(perm.comps[,3],breaks=50,xlim=c(min(pca.res$ExPosition.Data$eigs,c(perm.comps)),max(pca.res$ExPosition.Data$eigs,c(perm.comps))*1.1),border="white",col="mediumorchid4",main="Permutation Comp. 3",xlab="Permuted eigenvalues")#
abline(v= cut.off,col="firebrick3",lty=2,lwd=1.75)#
abline(v= pca.res$ExPosition.Data$eigs[3],col="olivedrab3",lty=1,lwd=1.75)#
#
## Finally, we compute the p-values#
pca.ps <- colSums(perm.comps > matrix(pca.res$ExPosition.Data$eigs,pca.iters,3,byrow=T)) / pca.iters#
pca.ps.adj <- pmax(pca.ps,1/pca.iters)
pca.ps.adj
rm(list=ls())#
gc()#
#
library(InPosition)#
# library(ez)#
# library(psych)#
#
	## load data for this example#
load('../Data/CAD.ABV.RATING.rda')#
#
	## split the data into a DATA variable and a DESIGN (which tells us where the beers are from)#
DATA <- CAD.ABV.RATING[,1:3]#
DESIGN <- CAD.ABV.RATING$REGION#
	## Standard PCA#
pca.res <- epPCA(DATA,scale=T,DESIGN= DESIGN,graphs=F)#
#
### Rule 0: Visualize your data, espeically before you do anything.#
	### Scree plot#
prettyScree(pca.res$ExPosition.Data$eigs)#
	### Component scores for rows and columns#
epGraphs(pca.res,contributionPlots=F,correlationPlotter=F)#
##############
##########
######
#				What does a bootstrap look like?#
######
##########
##############
#
set.seed(13)		## set a seed for the random number generator so we can recreate the result exactly#
#
## A bootstrap#
boot.indices.1 <- sample(nrow(DATA),nrow(DATA),replace=T)#
boot.pca.1 <- DATA[boot.indices.1,]#
boot.pca.res.1 <- epPCA(boot.pca.1,scale=T,graphs=F)#
prettyScree(boot.pca.res.1$ExPosition.Data$eigs)#
epGraphs(boot.pca.res.1,contributionPlots=F,correlationPlotter=F)#
#
### how variables differ when projected#
fjj1 <- supplementaryCols(boot.pca.1, pca.res)
rm(list=ls())#
gc()#
#
library(InPosition)#
# library(ez)#
# library(psych)#
#
	## load data for this example#
load('../Data/CAD.ABV.RATING.rda')#
#
	## split the data into a DATA variable and a DESIGN (which tells us where the beers are from)#
DATA <- CAD.ABV.RATING[,1:3]#
DESIGN <- CAD.ABV.RATING$REGION#
	## Standard PCA#
pca.res <- epPCA(DATA,scale=T,DESIGN= DESIGN,graphs=F)#
#
### Rule 0: Visualize your data, espeically before you do anything.#
	### Scree plot#
prettyScree(pca.res$ExPosition.Data$eigs)#
	### Component scores for rows and columns#
epGraphs(pca.res,contributionPlots=F,correlationPlotter=F)#
##############
##########
######
#				What does a bootstrap look like?#
######
##########
##############
#
set.seed(13)		## set a seed for the random number generator so we can recreate the result exactly#
#
## A bootstrap#
boot.indices.1 <- sample(nrow(DATA),nrow(DATA),replace=T)#
boot.pca.1 <- DATA[boot.indices.1,]#
boot.pca.res.1 <- epPCA(boot.pca.1,scale=T,graphs=F)#
prettyScree(boot.pca.res.1$ExPosition.Data$eigs)#
epGraphs(boot.pca.res.1,contributionPlots=F,correlationPlotter=F)#
#
### how variables differ when projected#
fjj1 <- boot.compute.fj(boot.pca.1, pca.res)#
## Another bootstrap#
boot.indices.2 <- sample(nrow(DATA),nrow(DATA),replace=T)#
boot.pca.2 <- DATA[boot.indices.2,]#
boot.pca.res.2 <- epPCA(boot.pca.2,scale=T,graphs=F)#
prettyScree(boot.pca.res.2$ExPosition.Data$eigs)#
epGraphs(boot.pca.res.2,contributionPlots=F,correlationPlotter=F)#
#
### how variables differ when projected#
fjj2 <- boot.compute.fj(boot.pca.2, pca.res)#
##############
##########
######
#				Turn bootstrap into a test#
######
##########
##############
#
## Bootstrap observations and: (1) save the eigenvalues and (2) project the data and save the column component scores#
iters <- 1000#
boot.comps <- matrix(NA,iters,length(pca.res$ExPosition.Data$eigs))#
boot.vars <- array(NA,dim=c(nrow(pca.res$ExPosition.Data$fj),ncol(pca.res$ExPosition.Data$fj),iters))#
#
for(i in 1:iters){#
	boot.indices <- sample(nrow(DATA),nrow(DATA),replace=T)#
	boot.pca <- DATA[boot.indices,]#
	boot.pca.res <- epPCA(boot.pca,scale=T,graphs=F)#
	boot.comps[i,1:length(boot.pca.res$ExPosition.Data$eigs)] <- boot.pca.res$ExPosition.Data$eigs#
	## project and store#
	boot.vars[,,i] <- boot.compute.fj(DATA, res = pca.res)#
}
## Boot eigen visualization#
boxplot(boot.comps,col=c("red","green","blue"),main="Bootstrapped and observed eigenvalues")#
abline(h=pca.res$ExPosition.Data$eigs,lty=2,col=c("red","green","blue"),lwd=2)#
points(pca.res$ExPosition.Data$eigs,type="l",lty=1,lwd=2,col="grey80")#
points(pca.res$ExPosition.Data$eigs,bg=c("red","green","blue"),pch=21,cex=2)#
axis(4,at=pca.res$ExPosition.Data$eigs,labels=round(pca.res$ExPosition.Data$eigs,digits=2))
prettyPlot(pca.res$ExPosition.Data$fj,cex=1,col=c("red","green","blue"),contributions=pca.res$ExPosition.Data$cj,contributionCircles=T)#
for(i in 1:100){#
	prettyPlot(boot.vars[,,i],col=c("red","green","blue"),dev.new=F,axes=F,new.plot=F)#
}#
prettyPlot(pca.res$ExPosition.Data$fj,cex=1,col=c("red","green","blue"),contributions=pca.res$ExPosition.Data$cj,contributionCircles=T,dev.new=F,axes=F,new.plot=F)
prettyPlot(pca.res$ExPosition.Data$fj,cex=1,col=c("red","green","blue"),contributions=pca.res$ExPosition.Data$cj,contributionCircles=T)#
these.cols <- c("red","green","blue")#
for(i in 1:3){#
	peeledHull(t(boot.vars[i,1:2,]),col=these.cols[i],percentage=.95)#
}#
#
## Get bootstrap ratios#
boot.ratio.test(boot.vars)
rm(list=ls())#
gc()#
#
library(InPosition)#
library(ez)#
# library(psych)#
#
	## load data for this example#
load('../Data/REGION.STYLE.RATING.rda')#
#
	## parametric approach, with the ez package#
ratings_anova = ezANOVA(#
    data = REGION.STYLE.RATING#
    , dv = RATEBEER_StyleRating#
    , wid = BEER.NAME#
    , between = c(REGION,PALE.v.NOT)#
    , type = 3#
)#
#
### Rule 0: Visualize your data, espeically before you do anything.#
dev.new()#
interaction.plot(REGION.STYLE.RATING$REGION, REGION.STYLE.RATING$PALE.v.NOT, REGION.STYLE.RATING$RATEBEER_StyleRating,type="b",xlab="REGION",ylab="STYLE RATINGS",trace.label="",pch=c(20,22),cex=2,lwd=2,col=c("mediumorchid4","darkseagreen"),main="2x2 ANOVA")#
## We will need a design-like matrix for bootstrap resampling.#
RSR.design <- makeNominalData(as.matrix(apply(REGION.STYLE.RATING[,2:3],1,paste,collapse="_")))#
##############
##########
######
#				What does a bootstrap look like?#
######
##########
##############
set.seed(13)		## set a seed for the random number generator so we can recreate the result exactly#
#
	## need a better name.#
boot.aov.1 <- REGION.STYLE.RATING[sort(boot.samples(REGION.STYLE.RATING,RSR.design,constrained=T)),]#
boot.aov.1$BEER.NAME <- as.factor(rownames(boot.aov.1))#
#
boot_anova_1 = ezANOVA(#
    data = droplevels(boot.aov.1)#
    , dv = RATEBEER_StyleRating#
    , wid = BEER.NAME#
    , between = c(REGION,PALE.v.NOT)#
    , type = 3#
)#
#
dev.new()#
interaction.plot(boot.aov.1$REGION, boot.aov.1$PALE.v.NOT, boot.aov.1$RATEBEER_StyleRating,type="b",xlab="REGION",ylab="STYLE RATINGS",trace.label="",pch=c(20,22),cex=2,lwd=2,col=c("mediumorchid4","darkseagreen"))#
boot.aov.2 <- REGION.STYLE.RATING[sort(boot.samples(REGION.STYLE.RATING,RSR.design,constrained=T)),]#
boot.aov.2$BEER.NAME <- as.factor(rownames(boot.aov.2))#
#
boot_anova_2 = ezANOVA(#
    data = droplevels(boot.aov.2)#
    , dv = RATEBEER_StyleRating#
    , wid = BEER.NAME#
    , between = c(REGION,PALE.v.NOT)#
    , type = 3#
    , return_aov = T#
)#
#
dev.new()#
interaction.plot(boot.aov.2$REGION, boot.aov.2$PALE.v.NOT, boot.aov.2$RATEBEER_StyleRating,type="b",xlab="REGION",ylab="STYLE RATINGS",trace.label="",pch=c(20,22),cex=2,lwd=2,col=c("mediumorchid4","darkseagreen"))#
iters <- 1000#
boot.fs <- matrix(NA,iters,3)#
	colnames(boot.fs) <- c("REGION","PALE.v.NOT","REGION:PALE.v.NOT")#
boot.pale.means <- boot.region.means <- matrix(NA,iters,2)	#
boot.cell.means <- array(NA,dim=c(2,2,iters))	#
for(i in 1:iters){#
	boot.aov <- REGION.STYLE.RATING[sort(boot.samples(REGION.STYLE.RATING,RSR.design,constrained=T)),]#
	boot.aov$BEER.NAME <- as.factor(rownames(boot.aov))#
	boot_anova = suppressWarnings(ezANOVA(#
	    data = droplevels(boot.aov)#
	    , dv = RATEBEER_StyleRating#
	    , wid = BEER.NAME#
	    , between = c(REGION,PALE.v.NOT)#
	    , type = 3#
    	, return_aov = T	    #
	))#
	## need to store the means, too#
	boot.means <- model.tables(boot_anova$aov,type="means")#
	boot.region.means[i,] <- boot.means$tables[[2]]#
	boot.pale.means[i,] <- boot.means$tables[[3]]	#
	boot.cell.means[,,i] <- boot.means$tables[[4]] #
	boot.fs[i,] <- boot_anova$ANOVA$F#
	if(i%%100==0){#
		print(i)#
	}#
}
dev.new()#
hist(boot.fs[,1],breaks=25,border="white",col="mediumorchid4",main="REGION: Bootstrap Distribution",xlab="Bootstrapped Fs")
boot.fs[,1]
dev.new()#
hist(sqrt(boot.fs[,1]),breaks=25,border="white",col="mediumorchid4",main="REGION: Bootstrap Distribution",xlab="Bootstrapped Fs")
ratings_anova$ANOVA$F
ratings_anova$ANOVA$F[1]
boot.region.means
dev.new()#
hist(boot.region.means[,1],breaks=25,xlim=c(.5,1),border="white",col="mediumorchid4",main="Bootstrap Distribution",xlab="Bootstrapped correlations")
dev.new()#
hist(boot.region.means[,1],breaks=25,border="white",col="mediumorchid4",main="Bootstrap Distribution",xlab="Bootstrapped correlations")
min(boot.region.means)
max(boot.region.means)
dev.new()#
hist(boot.region.means[,1],breaks=25,border="white",col="mediumorchid4",main="Bootstrap Distribution",xlab="Bootstrapped correlations",xlim=c(min(boot.region.means),max(boot.region.means)))
dev.new()#
hist(boot.region.means[,1],breaks=25,border="white",col="mediumorchid4",main="Bootstrap Distribution",xlab="Bootstrapped correlations",xlim=c(min(boot.region.means),max(boot.region.means)))#
#
hist(boot.region.means[,2],breaks=25,border="white",col="olivedrab4",main="Bootstrap Distribution",xlab="Bootstrapped correlations",xlim=c(min(boot.region.means),max(boot.region.means)),add=T)
dev.new()#
hist(boot.region.means[,1],breaks=25,border="white",col="mediumorchid2",main="Bootstrap Distribution",xlab="Bootstrapped correlations",xlim=c(min(boot.region.means),max(boot.region.means)))#
#
hist(boot.region.means[,2],breaks=25,border="white",col="mediumorchid4",add=T)
ratings_anova$ANOVA$Effect
ratings_anova = ezANOVA(#
    data = REGION.STYLE.RATING#
    , dv = RATEBEER_StyleRating#
    , wid = BEER.NAME#
    , between = c(REGION,PALE.v.NOT)#
    , type = 3#
    , return_aov = T    #
)
model.means(ratings_anova$aov)
model.tables(ratings_anova$aov,type="means")
aov.means <- model.tables(ratings_anova$aov,type="means")
aov.means$tables$REGION
aov.means$tables$REGION[,1]
aov.means$tables$REGION
aov.means$tables$REGION$CAN
aov.means$tables$REGION
aov.means$tables$REGION[1]
dev.new()#
hist(boot.region.means[,1],breaks=25,border="white",col="mediumorchid2",main="Bootstrap Distribution",xlab="Bootstrapped correlations",xlim=c(min(boot.region.means),max(boot.region.means)))#
hist(boot.region.means[,2],breaks=25,border="white",col="mediumorchid4",add=T)#
#
abline(h=aov.means$tables$REGION[1],lwd=1.75,col="black")#
abline(h=aov.means$tables$REGION[1],lwd=1.5,col="mediumorchid2",lty=2)
dev.new()#
hist(boot.region.means[,1],breaks=25,border="white",col="mediumorchid2",main="Bootstrap Distribution",xlab="Bootstrapped correlations",xlim=c(min(boot.region.means),max(boot.region.means)))#
hist(boot.region.means[,2],breaks=25,border="white",col="mediumorchid4",add=T)#
#
abline(v=aov.means$tables$REGION[1],lwd=1.75,col="black")#
abline(v=aov.means$tables$REGION[1],lwd=1.5,col="mediumorchid2",lty=2)
dev.new()#
hist(boot.region.means[,1],breaks=25,border="white",col="mediumorchid2",main="Bootstrap Distribution",xlab="Bootstrapped correlations",xlim=c(min(boot.region.means),max(boot.region.means)))#
hist(boot.region.means[,2],breaks=25,border="white",col="mediumorchid4",add=T)#
#
#abline(v=aov.means$tables$REGION[1],lwd=1.75,col="black")#
abline(v=aov.means$tables$REGION[1],lwd=1.5,col="olivedrab4")
dev.new()#
hist(boot.region.means[,1],breaks=25,border="white",col="mediumorchid2",main="Bootstrap Distribution",xlab="Bootstrapped correlations",xlim=c(min(boot.region.means),max(boot.region.means)))#
hist(boot.region.means[,2],breaks=25,border="white",col="mediumorchid4",add=T)#
#
#abline(v=aov.means$tables$REGION[1],lwd=1.75,col="black")#
abline(v=aov.means$tables$REGION[1],lwd=1.5,col="olivedrab4",lwd=2)
dev.new()#
hist(boot.region.means[,1],breaks=25,border="white",col="mediumorchid2",main="Bootstrap Distribution",xlab="Bootstrapped correlations",xlim=c(min(boot.region.means),max(boot.region.means)))#
hist(boot.region.means[,2],breaks=25,border="white",col="mediumorchid4",add=T)#
#
#abline(v=aov.means$tables$REGION[1],lwd=1.75,col="black")#
abline(v=aov.means$tables$REGION[1],lwd=2,col="olivedrab4")
dev.new()#
hist(boot.region.means[,1],breaks=50,border="white",col="mediumorchid2",main="Bootstrap Distribution",xlab="Bootstrapped correlations",xlim=c(min(boot.region.means),max(boot.region.means)))#
hist(boot.region.means[,2],breaks=50,border="white",col="mediumorchid4",add=T)#
#
#abline(v=aov.means$tables$REGION[1],lwd=1.75,col="black")#
abline(v=aov.means$tables$REGION[1],lwd=3,col="olivedrab4")
dev.new()#
hist(boot.region.means[,1],breaks=50,border="white",col="mediumorchid2",main="Bootstrap Distribution",xlab="Bootstrapped correlations",xlim=c(min(boot.region.means),max(boot.region.means)))#
abline(v=aov.means$tables$REGION[1],lwd=3,col="olivedrab2")#
#
hist(boot.region.means[,2],breaks=50,border="white",col="mediumorchid4",add=T)#
abline(v=aov.means$tables$REGION[2],lwd=3,col="olivedrab4")
dev.new()#
hist(boot.region.means[,1],breaks=50,border="white",col="mediumorchid2",main="Bootstrap Distribution",xlab="Bootstrapped correlations",xlim=c(min(boot.region.means),max(boot.region.means)))#
abline(v=aov.means$tables$REGION[1],lwd=3,col="olivedrab4")#
#
hist(boot.region.means[,2],breaks=50,border="white",col="mediumorchid4",add=T)#
abline(v=aov.means$tables$REGION[2],lwd=3,col="olivedrab2")
boot.region.means
apply(boot.region.means,2,function(x){ sort(x)[round(c(length(x)*.025,length(x)*.975))] }
apply(boot.region.means,2,function(x){ sort(x)[round(c(length(x)*.025,length(x)*.975))] })
dev.new()#
hist(boot.region.means[,1],breaks=50,border="white",col="mediumorchid2",main="Bootstrap Distribution",xlab="Bootstrapped correlations",xlim=c(min(boot.region.means),max(boot.region.means)))#
abline(v=aov.means$tables$REGION[1],lwd=3,col="olivedrab4")#
hist(boot.region.means[,2],breaks=50,border="white",col="mediumorchid4",add=T)#
abline(v=aov.means$tables$REGION[2],lwd=3,col="olivedrab2")#
#
CIs_REGION <- apply(boot.region.means,2,function(x){ sort(x)[round(c(length(x)*.025,length(x)*.975))] })#
abline(v=CIs_REGION[,1],lwd=1.75,col="firebrick4",lty=2)
dev.new()#
hist(boot.region.means[,1],breaks=50,border="white",col="mediumorchid2",main="Bootstrap Distribution",xlab="Bootstrapped correlations",xlim=c(min(boot.region.means),max(boot.region.means)))#
abline(v=aov.means$tables$REGION[1],lwd=3,col="olivedrab4")#
hist(boot.region.means[,2],breaks=50,border="white",col="mediumorchid4",add=T)#
abline(v=aov.means$tables$REGION[2],lwd=3,col="olivedrab2")#
#
CIs_REGION <- apply(boot.region.means,2,function(x){ sort(x)[round(c(length(x)*.025,length(x)*.975))] })#
abline(v=CIs_REGION[,1],lwd=1.75,col="firebrick4",lty=2)#
abline(v=CIs_REGION[,2],lwd=1.75,col="firebrick2",lty=2)
dev.new()#
hist(boot.region.means[,1],breaks=30,border="white",col="mediumorchid2",main="Bootstrap Distribution",xlab="Bootstrapped correlations",xlim=c(min(boot.region.means),max(boot.region.means)))#
abline(v=aov.means$tables$REGION[1],lwd=3,col="olivedrab4")#
hist(boot.region.means[,2],breaks=30,border="white",col="mediumorchid4",add=T)#
abline(v=aov.means$tables$REGION[2],lwd=3,col="olivedrab2")#
#
CIs_REGION <- apply(boot.region.means,2,function(x){ sort(x)[round(c(length(x)*.025,length(x)*.975))] })#
abline(v=CIs_REGION[,1],lwd=1.75,col="firebrick4",lty=2)#
abline(v=CIs_REGION[,2],lwd=1.75,col="firebrick2",lty=2)
boot.cell.means
CIs_INTERACTION <- apply(boot.pale.means,3,function(x){ sort(x)[round(c(length(x)*.025,length(x)*.975))] })
CIs_INTERACTION <- apply(boot.cell.means,3,function(x){ sort(x)[round(c(length(x)*.025,length(x)*.975))] })
CIs_INTERACTION
CIs_INTERACTION <- apply(boot.cell.means,c(1,2),function(x){ sort(x)[round(c(length(x)*.025,length(x)*.975))] })
CIs_INTERACTION
aov.means$tables$PALE.v.NOT
dev.new()#
hist(boot.pale.means[,1],breaks=30,border="white",col="mediumorchid2",main="PALE v NOT: Bootstrap Distribution",xlab="PALE v NOT: Bootstrapped means",xlim=c(min(boot.pale.means),max(boot.pale.means)))#
abline(v=aov.means$tables$PALE.v.NOT[1],lwd=3,col="olivedrab4")#
abline(v= CIs_PALE[,1],lwd=1.75,col="firebrick4",lty=2)#
hist(boot.pale.means[,2],breaks=30,border="white",col="mediumorchid4",add=T)#
abline(v=aov.means$tables$PALE.v.NOT[2],lwd=3,col="olivedrab2")#
abline(v= CIs_PALE[,2],lwd=1.75,col="firebrick2",lty=2)
CIs_REGION <- apply(boot.region.means,2,function(x){ sort(x)[round(c(length(x)*.025,length(x)*.975))] })#
CIs_PALE <- apply(boot.pale.means,2,function(x){ sort(x)[round(c(length(x)*.025,length(x)*.975))] })#
CIs_INTERACTION <- apply(boot.cell.means,c(1,2),function(x){ sort(x)[round(c(length(x)*.025,length(x)*.975))] })#
aov.means <- model.tables(ratings_anova$aov,type="means")#
dev.new()#
hist(boot.region.means[,1],breaks=30,border="white",col="mediumorchid2",main="REGION: Bootstrap Distribution",xlab="REGION: Bootstrapped means",xlim=c(min(boot.region.means),max(boot.region.means)))#
abline(v=aov.means$tables$REGION[1],lwd=3,col="olivedrab4")#
abline(v=CIs_REGION[,1],lwd=1.75,col="firebrick4",lty=2)#
hist(boot.region.means[,2],breaks=30,border="white",col="mediumorchid4",add=T)#
abline(v=aov.means$tables$REGION[2],lwd=3,col="olivedrab2")#
abline(v=CIs_REGION[,2],lwd=1.75,col="firebrick2",lty=2)#
dev.new()#
hist(boot.pale.means[,1],breaks=30,border="white",col="mediumorchid2",main="PALE v NOT: Bootstrap Distribution",xlab="PALE v NOT: Bootstrapped means",xlim=c(min(boot.pale.means),max(boot.pale.means)))#
abline(v=aov.means$tables$PALE.v.NOT[1],lwd=3,col="olivedrab4")#
abline(v= CIs_PALE[,1],lwd=1.75,col="firebrick4",lty=2)#
hist(boot.pale.means[,2],breaks=30,border="white",col="mediumorchid4",add=T)#
abline(v=aov.means$tables$PALE.v.NOT[2],lwd=3,col="olivedrab2")#
abline(v= CIs_PALE[,2],lwd=1.75,col="firebrick2",lty=2)
boot.cell.means
boot.cell.means[1,1,]
dev.new()#
hist(boot.cell.means[1,1,],breaks=30,border="white",col="mediumorchid2",main="INTERACTION: Bootstrap Distribution",xlab="INTERACTION: Bootstrapped means",xlim=c(min(boot.cell.means),max(boot.cell.means)))
dev.new()#
hist(boot.cell.means[1,1,],breaks=30,border="white",col="mediumorchid1",main="INTERACTION: Bootstrap Distribution",xlab="INTERACTION: Bootstrapped means",xlim=c(min(boot.cell.means),max(boot.cell.means)))
dev.new()#
hist(boot.cell.means[1,1,],breaks=30,border="white",col="mediumorchid1",main="INTERACTION: Bootstrap Distribution",xlab="INTERACTION: Bootstrapped means",xlim=c(min(boot.cell.means),max(boot.cell.means)))#
hist(boot.cell.means[1,2,],breaks=30,border="white",col="mediumorchid2",add=T)#
hist(boot.cell.means[2,1,],breaks=30,border="white",col="mediumorchid3",add=T)#
hist(boot.cell.means[2,2,],breaks=30,border="white",col="mediumorchid4",add=T)
dev.new()#
hist(boot.cell.means[1,1,],breaks=25,border="white",col="mediumorchid1",main="INTERACTION: Bootstrap Distribution",xlab="INTERACTION: Bootstrapped means",xlim=c(min(boot.cell.means),max(boot.cell.means)))#
hist(boot.cell.means[1,2,],breaks=25,border="white",col="mediumorchid2",add=T)#
hist(boot.cell.means[2,1,],breaks=25,border="white",col="mediumorchid3",add=T)#
hist(boot.cell.means[2,2,],breaks=25,border="white",col="mediumorchid4",add=T)
hist(boot.cell.means[1,2,],breaks=25,border="white",col="mediumorchid2")
hist(boot.cell.means[2,1,],breaks=25,border="white",col="mediumorchid3")
hist(boot.cell.means[2,2,],breaks=25,border="white",col="mediumorchid4")
dev.new()#
hist(boot.cell.means[1,1,],breaks=25,border="white",col="mediumorchid1",main="INTERACTION: Bootstrap Distribution",xlab="INTERACTION: Bootstrapped means",xlim=c(min(boot.cell.means),max(boot.cell.means)))#
hist(boot.cell.means[1,2,],breaks=25,border="white",col="mediumorchid2",add=T)#
hist(boot.cell.means[2,1,],breaks=25,border="white",col="mediumorchid3",add=T)#
hist(boot.cell.means[2,2,],breaks=25,border="white",col="mediumorchid4",add=T)
